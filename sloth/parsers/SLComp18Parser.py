# Generated from SLComp18.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3u")
        buf.write("\u0463\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\3\2\3\2\3\2\3\3\3\3")
        buf.write("\3\3\3\4\3\4\3\5\3\5\5\5\u00d3\n\5\3\6\3\6\3\7\3\7\3\b")
        buf.write("\3\b\3\t\3\t\5\t\u00dd\n\t\3\n\3\n\3\13\3\13\3\f\3\f\3")
        buf.write("\r\3\r\3\16\3\16\3\17\3\17\3\17\5\17\u00ec\n\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\5\20\u00f3\n\20\3\21\3\21\3\21\3\21")
        buf.write("\3\21\7\21\u00fa\n\21\f\21\16\21\u00fd\13\21\3\21\5\21")
        buf.write("\u0100\n\21\3\22\3\22\5\22\u0104\n\22\3\23\3\23\3\23\3")
        buf.write("\23\3\23\6\23\u010b\n\23\r\23\16\23\u010c\3\23\3\23\5")
        buf.write("\23\u0111\n\23\3\24\3\24\3\24\3\24\7\24\u0117\n\24\f\24")
        buf.write("\16\24\u011a\13\24\3\24\5\24\u011d\n\24\3\25\3\25\3\25")
        buf.write("\3\25\5\25\u0123\n\25\3\26\3\26\3\26\3\26\6\26\u0129\n")
        buf.write("\26\r\26\16\26\u012a\3\26\3\26\5\26\u012f\n\26\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\5\27\u0138\n\27\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32")
        buf.write("\3\32\6\32\u0148\n\32\r\32\16\32\u0149\3\32\3\32\5\32")
        buf.write("\u014e\n\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3")
        buf.write("\34\3\34\6\34\u015a\n\34\r\34\16\34\u015b\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\6\34\u0164\n\34\r\34\16\34\u0165\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\6\34\u0170\n\34")
        buf.write("\r\34\16\34\u0171\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\6\34\u017c\n\34\r\34\16\34\u017d\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\6\34\u0189\n\34\r\34\16\34")
        buf.write("\u018a\3\34\3\34\3\34\3\34\3\34\3\34\3\34\6\34\u0194\n")
        buf.write("\34\r\34\16\34\u0195\3\34\3\34\5\34\u019a\n\34\3\35\3")
        buf.write("\35\3\35\3\35\7\35\u01a0\n\35\f\35\16\35\u01a3\13\35\3")
        buf.write("\35\3\35\3\36\3\36\3\37\3\37\3\37\3\37\7\37\u01ad\n\37")
        buf.write("\f\37\16\37\u01b0\13\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\7\37\u01b8\n\37\f\37\16\37\u01bb\13\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\6\37\u01c2\n\37\r\37\16\37\u01c3\3\37\7\37")
        buf.write("\u01c7\n\37\f\37\16\37\u01ca\13\37\3\37\3\37\5\37\u01ce")
        buf.write("\n\37\3 \3 \3 \3 \3 \6 \u01d5\n \r \16 \u01d6\3 \3 \3")
        buf.write(" \3 \6 \u01dd\n \r \16 \u01de\3 \7 \u01e2\n \f \16 \u01e5")
        buf.write("\13 \3 \3 \3 \5 \u01ea\n \3!\3!\3!\6!\u01ef\n!\r!\16!")
        buf.write("\u01f0\3!\3!\3!\3!\3!\6!\u01f8\n!\r!\16!\u01f9\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0209\n!\3\"\3\"\3")
        buf.write("\"\3\"\6\"\u020f\n\"\r\"\16\"\u0210\3\"\3\"\3#\3#\3#\6")
        buf.write("#\u0218\n#\r#\16#\u0219\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#")
        buf.write("\3#\5#\u0227\n#\3$\3$\3$\3$\6$\u022d\n$\r$\16$\u022e\3")
        buf.write("$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\7\'\u0240")
        buf.write("\n\'\f\'\16\'\u0243\13\'\3\'\3\'\3(\3(\6(\u0249\n(\r(")
        buf.write("\16(\u024a\3(\3(\3(\3(\3(\3(\6(\u0253\n(\r(\16(\u0254")
        buf.write("\3(\3(\3(\6(\u025a\n(\r(\16(\u025b\3(\3(\3(\5(\u0261\n")
        buf.write("(\3)\3)\3)\3)\7)\u0267\n)\f)\16)\u026a\13)\3)\3)\3)\3")
        buf.write(")\3*\3*\3*\7*\u0273\n*\f*\16*\u0276\13*\3*\3*\3*\3*\3")
        buf.write("+\3+\3+\3+\3+\3+\5+\u0282\n+\3,\7,\u0285\n,\f,\16,\u0288")
        buf.write("\13,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3")
        buf.write("\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\3")
        buf.write("8\39\39\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\3?\3?\3@\3@\3A\3")
        buf.write("A\3B\3B\3C\3C\3D\3D\3E\3E\3F\3F\3G\3G\3H\3H\3I\3I\3J\3")
        buf.write("J\3K\3K\3L\3L\3M\3M\3M\3M\3M\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\6N\u02f0\nN\rN\16N\u02f1\3N\3N\3N")
        buf.write("\6N\u02f7\nN\rN\16N\u02f8\3N\3N\3N\3N\3N\3N\3N\3N\7N\u0303")
        buf.write("\nN\fN\16N\u0306\13N\3N\3N\3N\3N\3N\3N\3N\6N\u030f\nN")
        buf.write("\rN\16N\u0310\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\6N\u0329\nN\rN\16N\u032a\3N")
        buf.write("\3N\3N\6N\u0330\nN\rN\16N\u0331\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\7N\u033c\nN\fN\16N\u033f\13N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\6N\u0374\nN\rN\16N\u0375\3N\3N")
        buf.write("\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u039c")
        buf.write("\nN\3O\3O\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\5P\u03bd\n")
        buf.write("P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u03c7\nQ\3R\3R\3S\3S\3S\5")
        buf.write("S\u03ce\nS\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\6")
        buf.write("T\u03de\nT\rT\16T\u03df\3T\3T\3T\6T\u03e5\nT\rT\16T\u03e6")
        buf.write("\3T\3T\3T\5T\u03ec\nT\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\5U\u03fb\nU\3V\3V\3V\3V\3V\3W\3W\3W\3W\3W\3X\3")
        buf.write("X\3Y\3Y\3Z\3Z\7Z\u040d\nZ\fZ\16Z\u0410\13Z\3Z\3Z\3[\3")
        buf.write("[\7[\u0416\n[\f[\16[\u0419\13[\3[\3[\3\\\3\\\6\\\u041f")
        buf.write("\n\\\r\\\16\\\u0420\3\\\3\\\3]\3]\7]\u0427\n]\f]\16]\u042a")
        buf.write("\13]\3]\3]\3^\3^\3_\3_\3`\3`\7`\u0434\n`\f`\16`\u0437")
        buf.write("\13`\3`\3`\3a\3a\7a\u043d\na\fa\16a\u0440\13a\3a\3a\3")
        buf.write("b\3b\6b\u0446\nb\rb\16b\u0447\3b\3b\3c\3c\3c\3c\3c\3c")
        buf.write("\3c\3c\3c\3c\3c\5c\u0457\nc\3d\3d\3d\3d\3d\3d\3d\3d\5")
        buf.write("d\u0461\nd\3d\2\2e\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\2\t\3\29E\3\2\t\30\3\2Ks\5\2==CCEE\4\2\r\r\25\25")
        buf.write("\4\2\13\13\16\16\5\2\22\22\26\26\30\30\2\u04a4\2\u00c8")
        buf.write("\3\2\2\2\4\u00cb\3\2\2\2\6\u00ce\3\2\2\2\b\u00d2\3\2\2")
        buf.write("\2\n\u00d4\3\2\2\2\f\u00d6\3\2\2\2\16\u00d8\3\2\2\2\20")
        buf.write("\u00dc\3\2\2\2\22\u00de\3\2\2\2\24\u00e0\3\2\2\2\26\u00e2")
        buf.write("\3\2\2\2\30\u00e4\3\2\2\2\32\u00e6\3\2\2\2\34\u00eb\3")
        buf.write("\2\2\2\36\u00f2\3\2\2\2 \u00ff\3\2\2\2\"\u0103\3\2\2\2")
        buf.write("$\u0110\3\2\2\2&\u011c\3\2\2\2(\u0122\3\2\2\2*\u012e\3")
        buf.write("\2\2\2,\u0137\3\2\2\2.\u0139\3\2\2\2\60\u013e\3\2\2\2")
        buf.write("\62\u014d\3\2\2\2\64\u014f\3\2\2\2\66\u0199\3\2\2\28\u019b")
        buf.write("\3\2\2\2:\u01a6\3\2\2\2<\u01cd\3\2\2\2>\u01e9\3\2\2\2")
        buf.write("@\u0208\3\2\2\2B\u020a\3\2\2\2D\u0226\3\2\2\2F\u0228\3")
        buf.write("\2\2\2H\u0232\3\2\2\2J\u0237\3\2\2\2L\u023c\3\2\2\2N\u0260")
        buf.write("\3\2\2\2P\u0262\3\2\2\2R\u026f\3\2\2\2T\u0281\3\2\2\2")
        buf.write("V\u0286\3\2\2\2X\u0289\3\2\2\2Z\u028b\3\2\2\2\\\u028d")
        buf.write("\3\2\2\2^\u028f\3\2\2\2`\u0291\3\2\2\2b\u0293\3\2\2\2")
        buf.write("d\u0295\3\2\2\2f\u0297\3\2\2\2h\u0299\3\2\2\2j\u029b\3")
        buf.write("\2\2\2l\u029d\3\2\2\2n\u029f\3\2\2\2p\u02a1\3\2\2\2r\u02a3")
        buf.write("\3\2\2\2t\u02a5\3\2\2\2v\u02a7\3\2\2\2x\u02a9\3\2\2\2")
        buf.write("z\u02ab\3\2\2\2|\u02ad\3\2\2\2~\u02af\3\2\2\2\u0080\u02b1")
        buf.write("\3\2\2\2\u0082\u02b3\3\2\2\2\u0084\u02b5\3\2\2\2\u0086")
        buf.write("\u02b7\3\2\2\2\u0088\u02b9\3\2\2\2\u008a\u02bb\3\2\2\2")
        buf.write("\u008c\u02bd\3\2\2\2\u008e\u02bf\3\2\2\2\u0090\u02c1\3")
        buf.write("\2\2\2\u0092\u02c3\3\2\2\2\u0094\u02c5\3\2\2\2\u0096\u02c7")
        buf.write("\3\2\2\2\u0098\u02c9\3\2\2\2\u009a\u039b\3\2\2\2\u009c")
        buf.write("\u039d\3\2\2\2\u009e\u03bc\3\2\2\2\u00a0\u03c6\3\2\2\2")
        buf.write("\u00a2\u03c8\3\2\2\2\u00a4\u03cd\3\2\2\2\u00a6\u03eb\3")
        buf.write("\2\2\2\u00a8\u03fa\3\2\2\2\u00aa\u03fc\3\2\2\2\u00ac\u0401")
        buf.write("\3\2\2\2\u00ae\u0406\3\2\2\2\u00b0\u0408\3\2\2\2\u00b2")
        buf.write("\u040a\3\2\2\2\u00b4\u0413\3\2\2\2\u00b6\u041c\3\2\2\2")
        buf.write("\u00b8\u0424\3\2\2\2\u00ba\u042d\3\2\2\2\u00bc\u042f\3")
        buf.write("\2\2\2\u00be\u0431\3\2\2\2\u00c0\u043a\3\2\2\2\u00c2\u0443")
        buf.write("\3\2\2\2\u00c4\u0456\3\2\2\2\u00c6\u0460\3\2\2\2\u00c8")
        buf.write("\u00c9\5V,\2\u00c9\u00ca\7\2\2\3\u00ca\3\3\2\2\2\u00cb")
        buf.write("\u00cc\5\u00c6d\2\u00cc\u00cd\7\2\2\3\u00cd\5\3\2\2\2")
        buf.write("\u00ce\u00cf\t\2\2\2\u00cf\7\3\2\2\2\u00d0\u00d3\5\f\7")
        buf.write("\2\u00d1\u00d3\7t\2\2\u00d2\u00d0\3\2\2\2\u00d2\u00d1")
        buf.write("\3\2\2\2\u00d3\t\3\2\2\2\u00d4\u00d5\7\b\2\2\u00d5\13")
        buf.write("\3\2\2\2\u00d6\u00d7\t\3\2\2\u00d7\r\3\2\2\2\u00d8\u00d9")
        buf.write("\t\4\2\2\u00d9\17\3\2\2\2\u00da\u00dd\5\b\5\2\u00db\u00dd")
        buf.write("\5\n\6\2\u00dc\u00da\3\2\2\2\u00dc\u00db\3\2\2\2\u00dd")
        buf.write("\21\3\2\2\2\u00de\u00df\7F\2\2\u00df\23\3\2\2\2\u00e0")
        buf.write("\u00e1\7I\2\2\u00e1\25\3\2\2\2\u00e2\u00e3\7H\2\2\u00e3")
        buf.write("\27\3\2\2\2\u00e4\u00e5\7G\2\2\u00e5\31\3\2\2\2\u00e6")
        buf.write("\u00e7\7\7\2\2\u00e7\33\3\2\2\2\u00e8\u00ec\5\16\b\2\u00e9")
        buf.write("\u00ea\7J\2\2\u00ea\u00ec\5\b\5\2\u00eb\u00e8\3\2\2\2")
        buf.write("\u00eb\u00e9\3\2\2\2\u00ec\35\3\2\2\2\u00ed\u00f3\5\22")
        buf.write("\n\2\u00ee\u00f3\5\24\13\2\u00ef\u00f3\5\26\f\2\u00f0")
        buf.write("\u00f3\5\30\r\2\u00f1\u00f3\5\32\16\2\u00f2\u00ed\3\2")
        buf.write("\2\2\u00f2\u00ee\3\2\2\2\u00f2\u00ef\3\2\2\2\u00f2\u00f0")
        buf.write("\3\2\2\2\u00f2\u00f1\3\2\2\2\u00f3\37\3\2\2\2\u00f4\u0100")
        buf.write("\5\36\20\2\u00f5\u0100\5\20\t\2\u00f6\u0100\5\34\17\2")
        buf.write("\u00f7\u00fb\7\4\2\2\u00f8\u00fa\5 \21\2\u00f9\u00f8\3")
        buf.write("\2\2\2\u00fa\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fb\u00fc")
        buf.write("\3\2\2\2\u00fc\u00fe\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe")
        buf.write("\u0100\7\5\2\2\u00ff\u00f4\3\2\2\2\u00ff\u00f5\3\2\2\2")
        buf.write("\u00ff\u00f6\3\2\2\2\u00ff\u00f7\3\2\2\2\u0100!\3\2\2")
        buf.write("\2\u0101\u0104\5\22\n\2\u0102\u0104\5\20\t\2\u0103\u0101")
        buf.write("\3\2\2\2\u0103\u0102\3\2\2\2\u0104#\3\2\2\2\u0105\u0111")
        buf.write("\5\20\t\2\u0106\u0107\7\4\2\2\u0107\u0108\7:\2\2\u0108")
        buf.write("\u010a\5\20\t\2\u0109\u010b\5\"\22\2\u010a\u0109\3\2\2")
        buf.write("\2\u010b\u010c\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d")
        buf.write("\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010f\7\5\2\2\u010f")
        buf.write("\u0111\3\2\2\2\u0110\u0105\3\2\2\2\u0110\u0106\3\2\2\2")
        buf.write("\u0111%\3\2\2\2\u0112\u011d\5\36\20\2\u0113\u011d\5\20")
        buf.write("\t\2\u0114\u0118\7\4\2\2\u0115\u0117\5 \21\2\u0116\u0115")
        buf.write("\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011b\3\2\2\2\u011a\u0118\3\2\2\2")
        buf.write("\u011b\u011d\7\5\2\2\u011c\u0112\3\2\2\2\u011c\u0113\3")
        buf.write("\2\2\2\u011c\u0114\3\2\2\2\u011d\'\3\2\2\2\u011e\u0123")
        buf.write("\5\34\17\2\u011f\u0120\5\34\17\2\u0120\u0121\5&\24\2\u0121")
        buf.write("\u0123\3\2\2\2\u0122\u011e\3\2\2\2\u0122\u011f\3\2\2\2")
        buf.write("\u0123)\3\2\2\2\u0124\u012f\5$\23\2\u0125\u0126\7\4\2")
        buf.write("\2\u0126\u0128\5$\23\2\u0127\u0129\5*\26\2\u0128\u0127")
        buf.write("\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u0128\3\2\2\2\u012a")
        buf.write("\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\7\5\2\2")
        buf.write("\u012d\u012f\3\2\2\2\u012e\u0124\3\2\2\2\u012e\u0125\3")
        buf.write("\2\2\2\u012f+\3\2\2\2\u0130\u0138\5$\23\2\u0131\u0132")
        buf.write("\7\4\2\2\u0132\u0133\7;\2\2\u0133\u0134\5$\23\2\u0134")
        buf.write("\u0135\5*\26\2\u0135\u0136\7\5\2\2\u0136\u0138\3\2\2\2")
        buf.write("\u0137\u0130\3\2\2\2\u0137\u0131\3\2\2\2\u0138-\3\2\2")
        buf.write("\2\u0139\u013a\7\4\2\2\u013a\u013b\5\20\t\2\u013b\u013c")
        buf.write("\5\66\34\2\u013c\u013d\7\5\2\2\u013d/\3\2\2\2\u013e\u013f")
        buf.write("\7\4\2\2\u013f\u0140\5\20\t\2\u0140\u0141\5*\26\2\u0141")
        buf.write("\u0142\7\5\2\2\u0142\61\3\2\2\2\u0143\u014e\5\20\t\2\u0144")
        buf.write("\u0145\7\4\2\2\u0145\u0147\5\20\t\2\u0146\u0148\5\20\t")
        buf.write("\2\u0147\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149\u0147")
        buf.write("\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014b\3\2\2\2\u014b")
        buf.write("\u014c\7\5\2\2\u014c\u014e\3\2\2\2\u014d\u0143\3\2\2\2")
        buf.write("\u014d\u0144\3\2\2\2\u014e\63\3\2\2\2\u014f\u0150\7\4")
        buf.write("\2\2\u0150\u0151\5\62\32\2\u0151\u0152\5\66\34\2\u0152")
        buf.write("\u0153\7\5\2\2\u0153\65\3\2\2\2\u0154\u019a\5\36\20\2")
        buf.write("\u0155\u019a\5,\27\2\u0156\u0157\7\4\2\2\u0157\u0159\5")
        buf.write(",\27\2\u0158\u015a\5\66\34\2\u0159\u0158\3\2\2\2\u015a")
        buf.write("\u015b\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c\3\2\2\2")
        buf.write("\u015c\u015d\3\2\2\2\u015d\u015e\7\5\2\2\u015e\u019a\3")
        buf.write("\2\2\2\u015f\u0160\7\4\2\2\u0160\u0161\7A\2\2\u0161\u0163")
        buf.write("\7\4\2\2\u0162\u0164\5.\30\2\u0163\u0162\3\2\2\2\u0164")
        buf.write("\u0165\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2")
        buf.write("\u0166\u0167\3\2\2\2\u0167\u0168\7\5\2\2\u0168\u0169\5")
        buf.write("\66\34\2\u0169\u016a\7\5\2\2\u016a\u019a\3\2\2\2\u016b")
        buf.write("\u016c\7\4\2\2\u016c\u016d\7@\2\2\u016d\u016f\7\4\2\2")
        buf.write("\u016e\u0170\5\60\31\2\u016f\u016e\3\2\2\2\u0170\u0171")
        buf.write("\3\2\2\2\u0171\u016f\3\2\2\2\u0171\u0172\3\2\2\2\u0172")
        buf.write("\u0173\3\2\2\2\u0173\u0174\7\5\2\2\u0174\u0175\5\66\34")
        buf.write("\2\u0175\u0176\7\5\2\2\u0176\u019a\3\2\2\2\u0177\u0178")
        buf.write("\7\4\2\2\u0178\u0179\7>\2\2\u0179\u017b\7\4\2\2\u017a")
        buf.write("\u017c\5\60\31\2\u017b\u017a\3\2\2\2\u017c\u017d\3\2\2")
        buf.write("\2\u017d\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017f")
        buf.write("\3\2\2\2\u017f\u0180\7\5\2\2\u0180\u0181\5\66\34\2\u0181")
        buf.write("\u0182\7\5\2\2\u0182\u019a\3\2\2\2\u0183\u0184\7\4\2\2")
        buf.write("\u0184\u0185\7B\2\2\u0185\u0186\5\66\34\2\u0186\u0188")
        buf.write("\7\4\2\2\u0187\u0189\5\64\33\2\u0188\u0187\3\2\2\2\u0189")
        buf.write("\u018a\3\2\2\2\u018a\u0188\3\2\2\2\u018a\u018b\3\2\2\2")
        buf.write("\u018b\u018c\3\2\2\2\u018c\u018d\7\5\2\2\u018d\u018e\7")
        buf.write("\5\2\2\u018e\u019a\3\2\2\2\u018f\u0190\7\4\2\2\u0190\u0191")
        buf.write("\79\2\2\u0191\u0193\5\66\34\2\u0192\u0194\5(\25\2\u0193")
        buf.write("\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0193\3\2\2\2")
        buf.write("\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\7")
        buf.write("\5\2\2\u0198\u019a\3\2\2\2\u0199\u0154\3\2\2\2\u0199\u0155")
        buf.write("\3\2\2\2\u0199\u0156\3\2\2\2\u0199\u015f\3\2\2\2\u0199")
        buf.write("\u016b\3\2\2\2\u0199\u0177\3\2\2\2\u0199\u0183\3\2\2\2")
        buf.write("\u0199\u018f\3\2\2\2\u019a\67\3\2\2\2\u019b\u019c\7\4")
        buf.write("\2\2\u019c\u019d\5$\23\2\u019d\u01a1\5\22\n\2\u019e\u01a0")
        buf.write("\5(\25\2\u019f\u019e\3\2\2\2\u01a0\u01a3\3\2\2\2\u01a1")
        buf.write("\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a4\3\2\2\2")
        buf.write("\u01a3\u01a1\3\2\2\2\u01a4\u01a5\7\5\2\2\u01a59\3\2\2")
        buf.write("\2\u01a6\u01a7\t\5\2\2\u01a7;\3\2\2\2\u01a8\u01a9\7\4")
        buf.write("\2\2\u01a9\u01aa\5\36\20\2\u01aa\u01ae\5*\26\2\u01ab\u01ad")
        buf.write("\5(\25\2\u01ac\u01ab\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae")
        buf.write("\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b1\3\2\2\2")
        buf.write("\u01b0\u01ae\3\2\2\2\u01b1\u01b2\7\5\2\2\u01b2\u01ce\3")
        buf.write("\2\2\2\u01b3\u01b4\7\4\2\2\u01b4\u01b5\5:\36\2\u01b5\u01b9")
        buf.write("\5*\26\2\u01b6\u01b8\5(\25\2\u01b7\u01b6\3\2\2\2\u01b8")
        buf.write("\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2")
        buf.write("\u01ba\u01bc\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bc\u01bd\7")
        buf.write("\5\2\2\u01bd\u01ce\3\2\2\2\u01be\u01bf\7\4\2\2\u01bf\u01c1")
        buf.write("\5$\23\2\u01c0\u01c2\5*\26\2\u01c1\u01c0\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2")
        buf.write("\u01c4\u01c8\3\2\2\2\u01c5\u01c7\5(\25\2\u01c6\u01c5\3")
        buf.write("\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c8\u01c9")
        buf.write("\3\2\2\2\u01c9\u01cb\3\2\2\2\u01ca\u01c8\3\2\2\2\u01cb")
        buf.write("\u01cc\7\5\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01a8\3\2\2\2")
        buf.write("\u01cd\u01b3\3\2\2\2\u01cd\u01be\3\2\2\2\u01ce=\3\2\2")
        buf.write("\2\u01cf\u01ea\5<\37\2\u01d0\u01d1\7\4\2\2\u01d1\u01d2")
        buf.write("\7D\2\2\u01d2\u01d4\7\4\2\2\u01d3\u01d5\5\20\t\2\u01d4")
        buf.write("\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d4\3\2\2\2")
        buf.write("\u01d6\u01d7\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01d9\7")
        buf.write("\5\2\2\u01d9\u01da\7\4\2\2\u01da\u01dc\5$\23\2\u01db\u01dd")
        buf.write("\5*\26\2\u01dc\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de")
        buf.write("\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e3\3\2\2\2")
        buf.write("\u01e0\u01e2\5(\25\2\u01e1\u01e0\3\2\2\2\u01e2\u01e5\3")
        buf.write("\2\2\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e6")
        buf.write("\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e6\u01e7\7\5\2\2\u01e7")
        buf.write("\u01e8\7\5\2\2\u01e8\u01ea\3\2\2\2\u01e9\u01cf\3\2\2\2")
        buf.write("\u01e9\u01d0\3\2\2\2\u01ea?\3\2\2\2\u01eb\u01ec\7l\2\2")
        buf.write("\u01ec\u01ee\7\4\2\2\u01ed\u01ef\58\35\2\u01ee\u01ed\3")
        buf.write("\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f0\u01f1")
        buf.write("\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f3\7\5\2\2\u01f3")
        buf.write("\u0209\3\2\2\2\u01f4\u01f5\7T\2\2\u01f5\u01f7\7\4\2\2")
        buf.write("\u01f6\u01f8\5> \2\u01f7\u01f6\3\2\2\2\u01f8\u01f9\3\2")
        buf.write("\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb")
        buf.write("\3\2\2\2\u01fb\u01fc\7\5\2\2\u01fc\u0209\3\2\2\2\u01fd")
        buf.write("\u01fe\7m\2\2\u01fe\u0209\5\32\16\2\u01ff\u0200\7U\2\2")
        buf.write("\u0200\u0209\5\32\16\2\u0201\u0202\7P\2\2\u0202\u0209")
        buf.write("\5\32\16\2\u0203\u0204\7q\2\2\u0204\u0209\5\32\16\2\u0205")
        buf.write("\u0206\7]\2\2\u0206\u0209\5\32\16\2\u0207\u0209\5(\25")
        buf.write("\2\u0208\u01eb\3\2\2\2\u0208\u01f4\3\2\2\2\u0208\u01fd")
        buf.write("\3\2\2\2\u0208\u01ff\3\2\2\2\u0208\u0201\3\2\2\2\u0208")
        buf.write("\u0203\3\2\2\2\u0208\u0205\3\2\2\2\u0208\u0207\3\2\2\2")
        buf.write("\u0209A\3\2\2\2\u020a\u020b\7\4\2\2\u020b\u020c\7\24\2")
        buf.write("\2\u020c\u020e\5\20\t\2\u020d\u020f\5@!\2\u020e\u020d")
        buf.write("\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u020e\3\2\2\2\u0210")
        buf.write("\u0211\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213\7\5\2\2")
        buf.write("\u0213C\3\2\2\2\u0214\u0215\7p\2\2\u0215\u0217\7\4\2\2")
        buf.write("\u0216\u0218\5\20\t\2\u0217\u0216\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u0217\3\2\2\2\u0219\u021a\3\2\2\2\u021a")
        buf.write("\u021b\3\2\2\2\u021b\u021c\7\5\2\2\u021c\u0227\3\2\2\2")
        buf.write("\u021d\u021e\7X\2\2\u021e\u0227\5\32\16\2\u021f\u0220")
        buf.write("\7S\2\2\u0220\u0227\5\32\16\2\u0221\u0222\7q\2\2\u0222")
        buf.write("\u0227\5\32\16\2\u0223\u0224\7]\2\2\u0224\u0227\5\32\16")
        buf.write("\2\u0225\u0227\5(\25\2\u0226\u0214\3\2\2\2\u0226\u021d")
        buf.write("\3\2\2\2\u0226\u021f\3\2\2\2\u0226\u0221\3\2\2\2\u0226")
        buf.write("\u0223\3\2\2\2\u0226\u0225\3\2\2\2\u0227E\3\2\2\2\u0228")
        buf.write("\u0229\7\4\2\2\u0229\u022a\7\20\2\2\u022a\u022c\5\20\t")
        buf.write("\2\u022b\u022d\5D#\2\u022c\u022b\3\2\2\2\u022d\u022e\3")
        buf.write("\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0230")
        buf.write("\3\2\2\2\u0230\u0231\7\5\2\2\u0231G\3\2\2\2\u0232\u0233")
        buf.write("\7\4\2\2\u0233\u0234\5\20\t\2\u0234\u0235\5\22\n\2\u0235")
        buf.write("\u0236\7\5\2\2\u0236I\3\2\2\2\u0237\u0238\7\4\2\2\u0238")
        buf.write("\u0239\5\20\t\2\u0239\u023a\5*\26\2\u023a\u023b\7\5\2")
        buf.write("\2\u023bK\3\2\2\2\u023c\u023d\7\4\2\2\u023d\u0241\5\20")
        buf.write("\t\2\u023e\u0240\5J&\2\u023f\u023e\3\2\2\2\u0240\u0243")
        buf.write("\3\2\2\2\u0241\u023f\3\2\2\2\u0241\u0242\3\2\2\2\u0242")
        buf.write("\u0244\3\2\2\2\u0243\u0241\3\2\2\2\u0244\u0245\7\5\2\2")
        buf.write("\u0245M\3\2\2\2\u0246\u0248\7\4\2\2\u0247\u0249\5L\'\2")
        buf.write("\u0248\u0247\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u0248\3")
        buf.write("\2\2\2\u024a\u024b\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d")
        buf.write("\7\5\2\2\u024d\u0261\3\2\2\2\u024e\u024f\7\4\2\2\u024f")
        buf.write("\u0250\7D\2\2\u0250\u0252\7\4\2\2\u0251\u0253\5\20\t\2")
        buf.write("\u0252\u0251\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0252\3")
        buf.write("\2\2\2\u0254\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257")
        buf.write("\7\5\2\2\u0257\u0259\7\4\2\2\u0258\u025a\5L\'\2\u0259")
        buf.write("\u0258\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u0259\3\2\2\2")
        buf.write("\u025b\u025c\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u025e\7")
        buf.write("\5\2\2\u025e\u025f\7\5\2\2\u025f\u0261\3\2\2\2\u0260\u0246")
        buf.write("\3\2\2\2\u0260\u024e\3\2\2\2\u0261O\3\2\2\2\u0262\u0263")
        buf.write("\7\4\2\2\u0263\u0264\5\20\t\2\u0264\u0268\7\4\2\2\u0265")
        buf.write("\u0267\5\60\31\2\u0266\u0265\3\2\2\2\u0267\u026a\3\2\2")
        buf.write("\2\u0268\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b")
        buf.write("\3\2\2\2\u026a\u0268\3\2\2\2\u026b\u026c\7\5\2\2\u026c")
        buf.write("\u026d\5*\26\2\u026d\u026e\7\5\2\2\u026eQ\3\2\2\2\u026f")
        buf.write("\u0270\5\20\t\2\u0270\u0274\7\4\2\2\u0271\u0273\5\60\31")
        buf.write("\2\u0272\u0271\3\2\2\2\u0273\u0276\3\2\2\2\u0274\u0272")
        buf.write("\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0277\3\2\2\2\u0276")
        buf.write("\u0274\3\2\2\2\u0277\u0278\7\5\2\2\u0278\u0279\5*\26\2")
        buf.write("\u0279\u027a\5\66\34\2\u027aS\3\2\2\2\u027b\u0282\5\20")
        buf.write("\t\2\u027c\u027d\7\4\2\2\u027d\u027e\7\t\2\2\u027e\u027f")
        buf.write("\5\20\t\2\u027f\u0280\7\5\2\2\u0280\u0282\3\2\2\2\u0281")
        buf.write("\u027b\3\2\2\2\u0281\u027c\3\2\2\2\u0282U\3\2\2\2\u0283")
        buf.write("\u0285\5\u009aN\2\u0284\u0283\3\2\2\2\u0285\u0288\3\2")
        buf.write("\2\2\u0286\u0284\3\2\2\2\u0286\u0287\3\2\2\2\u0287W\3")
        buf.write("\2\2\2\u0288\u0286\3\2\2\2\u0289\u028a\7\31\2\2\u028a")
        buf.write("Y\3\2\2\2\u028b\u028c\7\32\2\2\u028c[\3\2\2\2\u028d\u028e")
        buf.write("\7\34\2\2\u028e]\3\2\2\2\u028f\u0290\7\33\2\2\u0290_\3")
        buf.write("\2\2\2\u0291\u0292\7\35\2\2\u0292a\3\2\2\2\u0293\u0294")
        buf.write("\7\36\2\2\u0294c\3\2\2\2\u0295\u0296\7\37\2\2\u0296e\3")
        buf.write("\2\2\2\u0297\u0298\7 \2\2\u0298g\3\2\2\2\u0299\u029a\7")
        buf.write("!\2\2\u029ai\3\2\2\2\u029b\u029c\7\"\2\2\u029ck\3\2\2")
        buf.write("\2\u029d\u029e\7#\2\2\u029em\3\2\2\2\u029f\u02a0\7$\2")
        buf.write("\2\u02a0o\3\2\2\2\u02a1\u02a2\7%\2\2\u02a2q\3\2\2\2\u02a3")
        buf.write("\u02a4\7&\2\2\u02a4s\3\2\2\2\u02a5\u02a6\7\'\2\2\u02a6")
        buf.write("u\3\2\2\2\u02a7\u02a8\7(\2\2\u02a8w\3\2\2\2\u02a9\u02aa")
        buf.write("\7)\2\2\u02aay\3\2\2\2\u02ab\u02ac\7*\2\2\u02ac{\3\2\2")
        buf.write("\2\u02ad\u02ae\7+\2\2\u02ae}\3\2\2\2\u02af\u02b0\7,\2")
        buf.write("\2\u02b0\177\3\2\2\2\u02b1\u02b2\7-\2\2\u02b2\u0081\3")
        buf.write("\2\2\2\u02b3\u02b4\7.\2\2\u02b4\u0083\3\2\2\2\u02b5\u02b6")
        buf.write("\7/\2\2\u02b6\u0085\3\2\2\2\u02b7\u02b8\7\60\2\2\u02b8")
        buf.write("\u0087\3\2\2\2\u02b9\u02ba\7\61\2\2\u02ba\u0089\3\2\2")
        buf.write("\2\u02bb\u02bc\7\62\2\2\u02bc\u008b\3\2\2\2\u02bd\u02be")
        buf.write("\7\63\2\2\u02be\u008d\3\2\2\2\u02bf\u02c0\7\64\2\2\u02c0")
        buf.write("\u008f\3\2\2\2\u02c1\u02c2\7\65\2\2\u02c2\u0091\3\2\2")
        buf.write("\2\u02c3\u02c4\7\66\2\2\u02c4\u0093\3\2\2\2\u02c5\u02c6")
        buf.write("\7\67\2\2\u02c6\u0095\3\2\2\2\u02c7\u02c8\78\2\2\u02c8")
        buf.write("\u0097\3\2\2\2\u02c9\u02ca\7\4\2\2\u02ca\u02cb\5*\26\2")
        buf.write("\u02cb\u02cc\5*\26\2\u02cc\u02cd\7\5\2\2\u02cd\u0099\3")
        buf.write("\2\2\2\u02ce\u02cf\7\4\2\2\u02cf\u02d0\5X-\2\u02d0\u02d1")
        buf.write("\5\66\34\2\u02d1\u02d2\7\5\2\2\u02d2\u039c\3\2\2\2\u02d3")
        buf.write("\u02d4\7\4\2\2\u02d4\u02d5\5Z.\2\u02d5\u02d6\7\5\2\2\u02d6")
        buf.write("\u039c\3\2\2\2\u02d7\u02d8\7\4\2\2\u02d8\u02d9\5^\60\2")
        buf.write("\u02d9\u02da\7\5\2\2\u02da\u039c\3\2\2\2\u02db\u02dc\7")
        buf.write("\4\2\2\u02dc\u02dd\5\\/\2\u02dd\u02de\7\5\2\2\u02de\u039c")
        buf.write("\3\2\2\2\u02df\u02e0\7\4\2\2\u02e0\u02e1\5`\61\2\u02e1")
        buf.write("\u02e2\5\20\t\2\u02e2\u02e3\5*\26\2\u02e3\u02e4\7\5\2")
        buf.write("\2\u02e4\u039c\3\2\2\2\u02e5\u02e6\7\4\2\2\u02e6\u02e7")
        buf.write("\5b\62\2\u02e7\u02e8\5\20\t\2\u02e8\u02e9\5N(\2\u02e9")
        buf.write("\u02ea\7\5\2\2\u02ea\u039c\3\2\2\2\u02eb\u02ec\7\4\2\2")
        buf.write("\u02ec\u02ed\5d\63\2\u02ed\u02ef\7\4\2\2\u02ee\u02f0\5")
        buf.write("H%\2\u02ef\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02ef")
        buf.write("\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3")
        buf.write("\u02f4\7\5\2\2\u02f4\u02f6\7\4\2\2\u02f5\u02f7\5N(\2\u02f6")
        buf.write("\u02f5\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f6\3\2\2\2")
        buf.write("\u02f8\u02f9\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fb\7")
        buf.write("\5\2\2\u02fb\u02fc\7\5\2\2\u02fc\u039c\3\2\2\2\u02fd\u02fe")
        buf.write("\7\4\2\2\u02fe\u02ff\5f\64\2\u02ff\u0300\5\20\t\2\u0300")
        buf.write("\u0304\7\4\2\2\u0301\u0303\5*\26\2\u0302\u0301\3\2\2\2")
        buf.write("\u0303\u0306\3\2\2\2\u0304\u0302\3\2\2\2\u0304\u0305\3")
        buf.write("\2\2\2\u0305\u0307\3\2\2\2\u0306\u0304\3\2\2\2\u0307\u0308")
        buf.write("\7\5\2\2\u0308\u0309\5*\26\2\u0309\u030a\7\5\2\2\u030a")
        buf.write("\u039c\3\2\2\2\u030b\u030c\7\4\2\2\u030c\u030e\5h\65\2")
        buf.write("\u030d\u030f\5\u0098M\2\u030e\u030d\3\2\2\2\u030f\u0310")
        buf.write("\3\2\2\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311")
        buf.write("\u0312\3\2\2\2\u0312\u0313\7\5\2\2\u0313\u039c\3\2\2\2")
        buf.write("\u0314\u0315\7\4\2\2\u0315\u0316\5j\66\2\u0316\u0317\5")
        buf.write("\20\t\2\u0317\u0318\5\22\n\2\u0318\u0319\7\5\2\2\u0319")
        buf.write("\u039c\3\2\2\2\u031a\u031b\7\4\2\2\u031b\u031c\5l\67\2")
        buf.write("\u031c\u031d\5R*\2\u031d\u031e\7\5\2\2\u031e\u039c\3\2")
        buf.write("\2\2\u031f\u0320\7\4\2\2\u0320\u0321\5n8\2\u0321\u0322")
        buf.write("\5R*\2\u0322\u0323\7\5\2\2\u0323\u039c\3\2\2\2\u0324\u0325")
        buf.write("\7\4\2\2\u0325\u0326\5p9\2\u0326\u0328\7\4\2\2\u0327\u0329")
        buf.write("\5P)\2\u0328\u0327\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u0328")
        buf.write("\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032c\3\2\2\2\u032c")
        buf.write("\u032d\7\5\2\2\u032d\u032f\7\4\2\2\u032e\u0330\5\66\34")
        buf.write("\2\u032f\u032e\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u032f")
        buf.write("\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\3\2\2\2\u0333")
        buf.write("\u0334\7\5\2\2\u0334\u0335\7\5\2\2\u0335\u039c\3\2\2\2")
        buf.write("\u0336\u0337\7\4\2\2\u0337\u0338\5r:\2\u0338\u0339\5\20")
        buf.write("\t\2\u0339\u033d\7\4\2\2\u033a\u033c\5\20\t\2\u033b\u033a")
        buf.write("\3\2\2\2\u033c\u033f\3\2\2\2\u033d\u033b\3\2\2\2\u033d")
        buf.write("\u033e\3\2\2\2\u033e\u0340\3\2\2\2\u033f\u033d\3\2\2\2")
        buf.write("\u0340\u0341\7\5\2\2\u0341\u0342\5*\26\2\u0342\u0343\7")
        buf.write("\5\2\2\u0343\u039c\3\2\2\2\u0344\u0345\7\4\2\2\u0345\u0346")
        buf.write("\5t;\2\u0346\u0347\5\32\16\2\u0347\u0348\7\5\2\2\u0348")
        buf.write("\u039c\3\2\2\2\u0349\u034a\7\4\2\2\u034a\u034b\5v<\2\u034b")
        buf.write("\u034c\7\5\2\2\u034c\u039c\3\2\2\2\u034d\u034e\7\4\2\2")
        buf.write("\u034e\u034f\5x=\2\u034f\u0350\7\5\2\2\u0350\u039c\3\2")
        buf.write("\2\2\u0351\u0352\7\4\2\2\u0352\u0353\5z>\2\u0353\u0354")
        buf.write("\7\5\2\2\u0354\u039c\3\2\2\2\u0355\u0356\7\4\2\2\u0356")
        buf.write("\u0357\5|?\2\u0357\u0358\5\u00a0Q\2\u0358\u0359\7\5\2")
        buf.write("\2\u0359\u039c\3\2\2\2\u035a\u035b\7\4\2\2\u035b\u035c")
        buf.write("\5~@\2\u035c\u035d\7\5\2\2\u035d\u039c\3\2\2\2\u035e\u035f")
        buf.write("\7\4\2\2\u035f\u0360\5\u0080A\2\u0360\u0361\5\34\17\2")
        buf.write("\u0361\u0362\7\5\2\2\u0362\u039c\3\2\2\2\u0363\u0364\7")
        buf.write("\4\2\2\u0364\u0365\5\u0082B\2\u0365\u0366\7\5\2\2\u0366")
        buf.write("\u039c\3\2\2\2\u0367\u0368\7\4\2\2\u0368\u0369\5\u0084")
        buf.write("C\2\u0369\u036a\7\5\2\2\u036a\u039c\3\2\2\2\u036b\u036c")
        buf.write("\7\4\2\2\u036c\u036d\5\u0086D\2\u036d\u036e\7\5\2\2\u036e")
        buf.write("\u039c\3\2\2\2\u036f\u0370\7\4\2\2\u0370\u0371\5\u0088")
        buf.write("E\2\u0371\u0373\7\4\2\2\u0372\u0374\5\66\34\2\u0373\u0372")
        buf.write("\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0373\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0378\7\5\2\2")
        buf.write("\u0378\u0379\7\5\2\2\u0379\u039c\3\2\2\2\u037a\u037b\7")
        buf.write("\4\2\2\u037b\u037c\5\u008aF\2\u037c\u037d\5\22\n\2\u037d")
        buf.write("\u037e\7\5\2\2\u037e\u039c\3\2\2\2\u037f\u0380\7\4\2\2")
        buf.write("\u0380\u0381\5\u008cG\2\u0381\u0382\5\22\n\2\u0382\u0383")
        buf.write("\7\5\2\2\u0383\u039c\3\2\2\2\u0384\u0385\7\4\2\2\u0385")
        buf.write("\u0386\5\u008eH\2\u0386\u0387\7\5\2\2\u0387\u039c\3\2")
        buf.write("\2\2\u0388\u0389\7\4\2\2\u0389\u038a\5\u0090I\2\u038a")
        buf.write("\u038b\7\5\2\2\u038b\u039c\3\2\2\2\u038c\u038d\7\4\2\2")
        buf.write("\u038d\u038e\5\u0092J\2\u038e\u038f\5(\25\2\u038f\u0390")
        buf.write("\7\5\2\2\u0390\u039c\3\2\2\2\u0391\u0392\7\4\2\2\u0392")
        buf.write("\u0393\5\u0094K\2\u0393\u0394\5\20\t\2\u0394\u0395\7\5")
        buf.write("\2\2\u0395\u039c\3\2\2\2\u0396\u0397\7\4\2\2\u0397\u0398")
        buf.write("\5\u0096L\2\u0398\u0399\5\u009eP\2\u0399\u039a\7\5\2\2")
        buf.write("\u039a\u039c\3\2\2\2\u039b\u02ce\3\2\2\2\u039b\u02d3\3")
        buf.write("\2\2\2\u039b\u02d7\3\2\2\2\u039b\u02db\3\2\2\2\u039b\u02df")
        buf.write("\3\2\2\2\u039b\u02e5\3\2\2\2\u039b\u02eb\3\2\2\2\u039b")
        buf.write("\u02fd\3\2\2\2\u039b\u030b\3\2\2\2\u039b\u0314\3\2\2\2")
        buf.write("\u039b\u031a\3\2\2\2\u039b\u031f\3\2\2\2\u039b\u0324\3")
        buf.write("\2\2\2\u039b\u0336\3\2\2\2\u039b\u0344\3\2\2\2\u039b\u0349")
        buf.write("\3\2\2\2\u039b\u034d\3\2\2\2\u039b\u0351\3\2\2\2\u039b")
        buf.write("\u0355\3\2\2\2\u039b\u035a\3\2\2\2\u039b\u035e\3\2\2\2")
        buf.write("\u039b\u0363\3\2\2\2\u039b\u0367\3\2\2\2\u039b\u036b\3")
        buf.write("\2\2\2\u039b\u036f\3\2\2\2\u039b\u037a\3\2\2\2\u039b\u037f")
        buf.write("\3\2\2\2\u039b\u0384\3\2\2\2\u039b\u0388\3\2\2\2\u039b")
        buf.write("\u038c\3\2\2\2\u039b\u0391\3\2\2\2\u039b\u0396\3\2\2\2")
        buf.write("\u039c\u009b\3\2\2\2\u039d\u039e\t\6\2\2\u039e\u009d\3")
        buf.write("\2\2\2\u039f\u03a0\7Q\2\2\u03a0\u03bd\5\32\16\2\u03a1")
        buf.write("\u03a2\7V\2\2\u03a2\u03bd\5\u009cO\2\u03a3\u03a4\7W\2")
        buf.write("\2\u03a4\u03bd\5\u009cO\2\u03a5\u03a6\7_\2\2\u03a6\u03bd")
        buf.write("\5\u009cO\2\u03a7\u03a8\7`\2\2\u03a8\u03bd\5\u009cO\2")
        buf.write("\u03a9\u03aa\7a\2\2\u03aa\u03bd\5\u009cO\2\u03ab\u03ac")
        buf.write("\7b\2\2\u03ac\u03bd\5\u009cO\2\u03ad\u03ae\7c\2\2\u03ae")
        buf.write("\u03bd\5\u009cO\2\u03af\u03b0\7d\2\2\u03b0\u03bd\5\u009c")
        buf.write("O\2\u03b1\u03b2\7e\2\2\u03b2\u03bd\5\u009cO\2\u03b3\u03b4")
        buf.write("\7f\2\2\u03b4\u03bd\5\22\n\2\u03b5\u03b6\7h\2\2\u03b6")
        buf.write("\u03bd\5\32\16\2\u03b7\u03b8\7i\2\2\u03b8\u03bd\5\22\n")
        buf.write("\2\u03b9\u03ba\7r\2\2\u03ba\u03bd\5\22\n\2\u03bb\u03bd")
        buf.write("\5(\25\2\u03bc\u039f\3\2\2\2\u03bc\u03a1\3\2\2\2\u03bc")
        buf.write("\u03a3\3\2\2\2\u03bc\u03a5\3\2\2\2\u03bc\u03a7\3\2\2\2")
        buf.write("\u03bc\u03a9\3\2\2\2\u03bc\u03ab\3\2\2\2\u03bc\u03ad\3")
        buf.write("\2\2\2\u03bc\u03af\3\2\2\2\u03bc\u03b1\3\2\2\2\u03bc\u03b3")
        buf.write("\3\2\2\2\u03bc\u03b5\3\2\2\2\u03bc\u03b7\3\2\2\2\u03bc")
        buf.write("\u03b9\3\2\2\2\u03bc\u03bb\3\2\2\2\u03bd\u009f\3\2\2\2")
        buf.write("\u03be\u03c7\7K\2\2\u03bf\u03c7\7L\2\2\u03c0\u03c7\7M")
        buf.write("\2\2\u03c1\u03c7\7R\2\2\u03c2\u03c7\7\\\2\2\u03c3\u03c7")
        buf.write("\7g\2\2\u03c4\u03c7\7s\2\2\u03c5\u03c7\5\34\17\2\u03c6")
        buf.write("\u03be\3\2\2\2\u03c6\u03bf\3\2\2\2\u03c6\u03c0\3\2\2\2")
        buf.write("\u03c6\u03c1\3\2\2\2\u03c6\u03c2\3\2\2\2\u03c6\u03c3\3")
        buf.write("\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c5\3\2\2\2\u03c7\u00a1")
        buf.write("\3\2\2\2\u03c8\u03c9\t\7\2\2\u03c9\u00a3\3\2\2\2\u03ca")
        buf.write("\u03ce\7\21\2\2\u03cb\u03ce\7\17\2\2\u03cc\u03ce\5 \21")
        buf.write("\2\u03cd\u03ca\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03cc")
        buf.write("\3\2\2\2\u03ce\u00a5\3\2\2\2\u03cf\u03d0\7\4\2\2\u03d0")
        buf.write("\u03d1\7#\2\2\u03d1\u03d2\5R*\2\u03d2\u03d3\7\5\2\2\u03d3")
        buf.write("\u03ec\3\2\2\2\u03d4\u03d5\7\4\2\2\u03d5\u03d6\7$\2\2")
        buf.write("\u03d6\u03d7\5R*\2\u03d7\u03d8\7\5\2\2\u03d8\u03ec\3\2")
        buf.write("\2\2\u03d9\u03da\7\4\2\2\u03da\u03db\7%\2\2\u03db\u03dd")
        buf.write("\7\4\2\2\u03dc\u03de\5P)\2\u03dd\u03dc\3\2\2\2\u03de\u03df")
        buf.write("\3\2\2\2\u03df\u03dd\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0")
        buf.write("\u03e1\3\2\2\2\u03e1\u03e2\7\5\2\2\u03e2\u03e4\7\4\2\2")
        buf.write("\u03e3\u03e5\5\66\34\2\u03e4\u03e3\3\2\2\2\u03e5\u03e6")
        buf.write("\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7")
        buf.write("\u03e8\3\2\2\2\u03e8\u03e9\7\5\2\2\u03e9\u03ea\7\5\2\2")
        buf.write("\u03ea\u03ec\3\2\2\2\u03eb\u03cf\3\2\2\2\u03eb\u03d4\3")
        buf.write("\2\2\2\u03eb\u03d9\3\2\2\2\u03ec\u00a7\3\2\2\2\u03ed\u03ee")
        buf.write("\7L\2\2\u03ee\u03fb\5\22\n\2\u03ef\u03f0\7M\2\2\u03f0")
        buf.write("\u03fb\5\32\16\2\u03f1\u03f2\7R\2\2\u03f2\u03fb\5\u00a2")
        buf.write("R\2\u03f3\u03f4\7\\\2\2\u03f4\u03fb\5\32\16\2\u03f5\u03f6")
        buf.write("\7g\2\2\u03f6\u03fb\5\u00a4S\2\u03f7\u03f8\7s\2\2\u03f8")
        buf.write("\u03fb\5\32\16\2\u03f9\u03fb\5(\25\2\u03fa\u03ed\3\2\2")
        buf.write("\2\u03fa\u03ef\3\2\2\2\u03fa\u03f1\3\2\2\2\u03fa\u03f3")
        buf.write("\3\2\2\2\u03fa\u03f5\3\2\2\2\u03fa\u03f7\3\2\2\2\u03fa")
        buf.write("\u03f9\3\2\2\2\u03fb\u00a9\3\2\2\2\u03fc\u03fd\7\4\2\2")
        buf.write("\u03fd\u03fe\5\66\34\2\u03fe\u03ff\5\66\34\2\u03ff\u0400")
        buf.write("\7\5\2\2\u0400\u00ab\3\2\2\2\u0401\u0402\7\4\2\2\u0402")
        buf.write("\u0403\5\20\t\2\u0403\u0404\5\u009cO\2\u0404\u0405\7\5")
        buf.write("\2\2\u0405\u00ad\3\2\2\2\u0406\u0407\t\b\2\2\u0407\u00af")
        buf.write("\3\2\2\2\u0408\u0409\5\32\16\2\u0409\u00b1\3\2\2\2\u040a")
        buf.write("\u040e\7\4\2\2\u040b\u040d\5\66\34\2\u040c\u040b\3\2\2")
        buf.write("\2\u040d\u0410\3\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f")
        buf.write("\3\2\2\2\u040f\u0411\3\2\2\2\u0410\u040e\3\2\2\2\u0411")
        buf.write("\u0412\7\5\2\2\u0412\u00b3\3\2\2\2\u0413\u0417\7\4\2\2")
        buf.write("\u0414\u0416\5\u00acW\2\u0415\u0414\3\2\2\2\u0416\u0419")
        buf.write("\3\2\2\2\u0417\u0415\3\2\2\2\u0417\u0418\3\2\2\2\u0418")
        buf.write("\u041a\3\2\2\2\u0419\u0417\3\2\2\2\u041a\u041b\7\5\2\2")
        buf.write("\u041b\u00b5\3\2\2\2\u041c\u041e\7\4\2\2\u041d\u041f\5")
        buf.write("\u00a8U\2\u041e\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420")
        buf.write("\u041e\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0422\3\2\2\2")
        buf.write("\u0422\u0423\7\5\2\2\u0423\u00b7\3\2\2\2\u0424\u0428\7")
        buf.write("\4\2\2\u0425\u0427\5\u00a6T\2\u0426\u0425\3\2\2\2\u0427")
        buf.write("\u042a\3\2\2\2\u0428\u0426\3\2\2\2\u0428\u0429\3\2\2\2")
        buf.write("\u0429\u042b\3\2\2\2\u042a\u0428\3\2\2\2\u042b\u042c\7")
        buf.write("\5\2\2\u042c\u00b9\3\2\2\2\u042d\u042e\5&\24\2\u042e\u00bb")
        buf.write("\3\2\2\2\u042f\u0430\5 \21\2\u0430\u00bd\3\2\2\2\u0431")
        buf.write("\u0435\7\4\2\2\u0432\u0434\5\20\t\2\u0433\u0432\3\2\2")
        buf.write("\2\u0434\u0437\3\2\2\2\u0435\u0433\3\2\2\2\u0435\u0436")
        buf.write("\3\2\2\2\u0436\u0438\3\2\2\2\u0437\u0435\3\2\2\2\u0438")
        buf.write("\u0439\7\5\2\2\u0439\u00bf\3\2\2\2\u043a\u043e\7\4\2\2")
        buf.write("\u043b\u043d\5\20\t\2\u043c\u043b\3\2\2\2\u043d\u0440")
        buf.write("\3\2\2\2\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f")
        buf.write("\u0441\3\2\2\2\u0440\u043e\3\2\2\2\u0441\u0442\7\5\2\2")
        buf.write("\u0442\u00c1\3\2\2\2\u0443\u0445\7\4\2\2\u0444\u0446\5")
        buf.write("\u00aaV\2\u0445\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447")
        buf.write("\u0445\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449\3\2\2\2")
        buf.write("\u0449\u044a\7\5\2\2\u044a\u00c3\3\2\2\2\u044b\u0457\5")
        buf.write("\u00aeX\2\u044c\u0457\5\u00b0Y\2\u044d\u0457\5\u00b2Z")
        buf.write("\2\u044e\u0457\5\u00b4[\2\u044f\u0457\5\u00b6\\\2\u0450")
        buf.write("\u0457\5\u00b8]\2\u0451\u0457\5\u00ba^\2\u0452\u0457\5")
        buf.write("\u00bc_\2\u0453\u0457\5\u00be`\2\u0454\u0457\5\u00c0a")
        buf.write("\2\u0455\u0457\5\u00c2b\2\u0456\u044b\3\2\2\2\u0456\u044c")
        buf.write("\3\2\2\2\u0456\u044d\3\2\2\2\u0456\u044e\3\2\2\2\u0456")
        buf.write("\u044f\3\2\2\2\u0456\u0450\3\2\2\2\u0456\u0451\3\2\2\2")
        buf.write("\u0456\u0452\3\2\2\2\u0456\u0453\3\2\2\2\u0456\u0454\3")
        buf.write("\2\2\2\u0456\u0455\3\2\2\2\u0457\u00c5\3\2\2\2\u0458\u0461")
        buf.write("\7\23\2\2\u0459\u0461\5\u00c4c\2\u045a\u0461\7\27\2\2")
        buf.write("\u045b\u045c\7\4\2\2\u045c\u045d\7\f\2\2\u045d\u045e\5")
        buf.write("\32\16\2\u045e\u045f\7\5\2\2\u045f\u0461\3\2\2\2\u0460")
        buf.write("\u0458\3\2\2\2\u0460\u0459\3\2\2\2\u0460\u045a\3\2\2\2")
        buf.write("\u0460\u045b\3\2\2\2\u0461\u00c7\3\2\2\2M\u00d2\u00dc")
        buf.write("\u00eb\u00f2\u00fb\u00ff\u0103\u010c\u0110\u0118\u011c")
        buf.write("\u0122\u012a\u012e\u0137\u0149\u014d\u015b\u0165\u0171")
        buf.write("\u017d\u018a\u0195\u0199\u01a1\u01ae\u01b9\u01c3\u01c8")
        buf.write("\u01cd\u01d6\u01de\u01e3\u01e9\u01f0\u01f9\u0208\u0210")
        buf.write("\u0219\u0226\u022e\u0241\u024a\u0254\u025b\u0260\u0268")
        buf.write("\u0274\u0281\u0286\u02f1\u02f8\u0304\u0310\u032a\u0331")
        buf.write("\u033d\u0375\u039b\u03bc\u03c6\u03cd\u03df\u03e6\u03eb")
        buf.write("\u03fa\u040e\u0417\u0420\u0428\u0435\u043e\u0447\u0456")
        buf.write("\u0460")
        return buf.getvalue()


class SLComp18Parser ( Parser ):

    grammarFileName = "SLComp18.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'('", "')'", "';'", "<INVALID>", 
                     "<INVALID>", "'not'", "'Bool'", "'continued-execution'", 
                     "'error'", "'false'", "'immediate-exit'", "'incomplete'", 
                     "'logic'", "'memout'", "'sat'", "'success'", "'theory'", 
                     "'true'", "'unknown'", "'unsupported'", "'unsat'", 
                     "'assert'", "'check-sat'", "'check-sat-assuming'", 
                     "'check-unsat'", "'declare-const'", "'declare-datatype'", 
                     "'declare-datatypes'", "'declare-fun'", "'declare-heap'", 
                     "'declare-sort'", "'define-fun'", "'define-fun-rec'", 
                     "'define-funs-rec'", "'define-sort'", "'echo'", "'exit'", 
                     "'get-assertions'", "'get-assignment'", "'get-info'", 
                     "'get-model'", "'get-option'", "'get-proof'", "'get-unsat-assumptions'", 
                     "'get-unsat-core'", "'get-value'", "'pop'", "'push'", 
                     "'reset'", "'reset-assertions'", "'set-info'", "'set-logic'", 
                     "'set-option'", "'!'", "'_'", "'as'", "'BINARY'", "'DECIMAL'", 
                     "'exists'", "'HEXADECIMAL'", "'forall'", "'let'", "'match'", 
                     "'NUMERAL'", "'par'", "'string'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':'", "':all-statistics'", 
                     "':assertion-stack-levels'", "':authors'", "':category'", 
                     "':chainable'", "':definition'", "':diagnostic-output-channel'", 
                     "':error-behavior'", "':extensions'", "':funs'", "':funs-description'", 
                     "':global-declarations'", "':interactive-mode'", "':language'", 
                     "':left-assoc'", "':license'", "':named'", "':name'", 
                     "':notes'", "':pattern'", "':print-success'", "':produce-assertions'", 
                     "':produce-assignments'", "':produce-models'", "':produce-proofs'", 
                     "':produce-unsat-assumptions'", "':produce-unsat-cores'", 
                     "':random-seed'", "':reason-unknown'", "':regular-output-channel'", 
                     "':reproducible-resource-limit'", "':right-assoc'", 
                     "':smt-lib-version'", "':sorts'", "':sorts-description'", 
                     "':source'", "':status'", "':theories'", "':values'", 
                     "':verbosity'", "':version'" ]

    symbolicNames = [ "<INVALID>", "Comment", "ParOpen", "ParClose", "Semicolon", 
                      "String", "QuotedSymbol", "PS_Not", "PS_Bool", "PS_ContinuedExecution", 
                      "PS_Error", "PS_False", "PS_ImmediateExit", "PS_Incomplete", 
                      "PS_Logic", "PS_Memout", "PS_Sat", "PS_Success", "PS_Theory", 
                      "PS_True", "PS_Unknown", "PS_Unsupported", "PS_Unsat", 
                      "CMD_Assert", "CMD_CheckSat", "CMD_CheckSatAssuming", 
                      "CMD_CheckUnsat", "CMD_DeclareConst", "CMD_DeclareDatatype", 
                      "CMD_DeclareDatatypes", "CMD_DeclareFun", "CMD_DeclareHeap", 
                      "CMD_DeclareSort", "CMD_DefineFun", "CMD_DefineFunRec", 
                      "CMD_DefineFunsRec", "CMD_DefineSort", "CMD_Echo", 
                      "CMD_Exit", "CMD_GetAssertions", "CMD_GetAssignment", 
                      "CMD_GetInfo", "CMD_GetModel", "CMD_GetOption", "CMD_GetProof", 
                      "CMD_GetUnsatAssumptions", "CMD_GetUnsatCore", "CMD_GetValue", 
                      "CMD_Pop", "CMD_Push", "CMD_Reset", "CMD_ResetAssertions", 
                      "CMD_SetInfo", "CMD_SetLogic", "CMD_SetOption", "GRW_Exclamation", 
                      "GRW_Underscore", "GRW_As", "GRW_Binary", "GRW_Decimal", 
                      "GRW_Exists", "GRW_Hexadecimal", "GRW_Forall", "GRW_Let", 
                      "GRW_Match", "GRW_Numeral", "GRW_Par", "GRW_String", 
                      "Numeral", "Binary", "HexDecimal", "Decimal", "Colon", 
                      "PK_AllStatistics", "PK_AssertionStackLevels", "PK_Authors", 
                      "PK_Category", "PK_Chainable", "PK_Definition", "PK_DiagnosticOutputChannel", 
                      "PK_ErrorBehaviour", "PK_Extension", "PK_Funs", "PK_FunsDescription", 
                      "PK_GlobalDeclarations", "PK_InteractiveMode", "PK_Language", 
                      "PK_LeftAssoc", "PK_License", "PK_Named", "PK_Name", 
                      "PK_Notes", "PK_Pattern", "PK_PrintSuccess", "PK_ProduceAssertions", 
                      "PK_ProduceAssignments", "PK_ProduceModels", "PK_ProduceProofs", 
                      "PK_ProduceUnsatAssumptions", "PK_ProduceUnsatCores", 
                      "PK_RandomSeed", "PK_ReasonUnknown", "PK_RegularOutputChannel", 
                      "PK_ReproducibleResourceLimit", "PK_RightAssoc", "PK_SmtLibVersion", 
                      "PK_Sorts", "PK_SortsDescription", "PK_Source", "PK_Status", 
                      "PK_Theories", "PK_Values", "PK_Verbosity", "PK_Version", 
                      "UndefinedSymbol", "WS" ]

    RULE_start = 0
    RULE_response = 1
    RULE_generalReservedWord = 2
    RULE_simpleSymbol = 3
    RULE_quotedSymbol = 4
    RULE_predefSymbol = 5
    RULE_predefKeyword = 6
    RULE_symbol = 7
    RULE_numeral = 8
    RULE_decimal = 9
    RULE_hexadecimal = 10
    RULE_binary = 11
    RULE_string = 12
    RULE_keyword = 13
    RULE_spec_constant = 14
    RULE_s_expr = 15
    RULE_index = 16
    RULE_identifier = 17
    RULE_attribute_value = 18
    RULE_attribute = 19
    RULE_sort = 20
    RULE_qual_identifer = 21
    RULE_var_binding = 22
    RULE_sorted_var = 23
    RULE_pattern = 24
    RULE_match_case = 25
    RULE_term = 26
    RULE_sort_symbol_decl = 27
    RULE_meta_spec_constant = 28
    RULE_fun_symbol_decl = 29
    RULE_par_fun_symbol_decl = 30
    RULE_theory_attribute = 31
    RULE_theory_decl = 32
    RULE_logic_attribue = 33
    RULE_logic = 34
    RULE_sort_dec = 35
    RULE_selector_dec = 36
    RULE_constructor_dec = 37
    RULE_datatype_dec = 38
    RULE_function_dec = 39
    RULE_function_def = 40
    RULE_prop_literal = 41
    RULE_script = 42
    RULE_cmd_assert = 43
    RULE_cmd_checkSat = 44
    RULE_cmd_checkUnsat = 45
    RULE_cmd_checkSatAssuming = 46
    RULE_cmd_declareConst = 47
    RULE_cmd_declareDatatype = 48
    RULE_cmd_declareDatatypes = 49
    RULE_cmd_declareFun = 50
    RULE_cmd_declareHeap = 51
    RULE_cmd_declareSort = 52
    RULE_cmd_defineFun = 53
    RULE_cmd_defineFunRec = 54
    RULE_cmd_defineFunsRec = 55
    RULE_cmd_defineSort = 56
    RULE_cmd_echo = 57
    RULE_cmd_exit = 58
    RULE_cmd_getAssertions = 59
    RULE_cmd_getAssignment = 60
    RULE_cmd_getInfo = 61
    RULE_cmd_getModel = 62
    RULE_cmd_getOption = 63
    RULE_cmd_getProof = 64
    RULE_cmd_getUnsatAssumptions = 65
    RULE_cmd_getUnsatCore = 66
    RULE_cmd_getValue = 67
    RULE_cmd_pop = 68
    RULE_cmd_push = 69
    RULE_cmd_reset = 70
    RULE_cmd_resetAssertions = 71
    RULE_cmd_setInfo = 72
    RULE_cmd_setLogic = 73
    RULE_cmd_setOption = 74
    RULE_heap_dec = 75
    RULE_command = 76
    RULE_b_value = 77
    RULE_option = 78
    RULE_info_flag = 79
    RULE_error_behaviour = 80
    RULE_reason_unknown = 81
    RULE_model_response = 82
    RULE_info_response = 83
    RULE_valuation_pair = 84
    RULE_t_valuation_pair = 85
    RULE_check_sat_response = 86
    RULE_echo_response = 87
    RULE_get_assertions_response = 88
    RULE_get_assignment_response = 89
    RULE_get_info_response = 90
    RULE_get_model_response = 91
    RULE_get_option_response = 92
    RULE_get_proof_response = 93
    RULE_get_unsat_assump_response = 94
    RULE_get_unsat_core_response = 95
    RULE_get_value_response = 96
    RULE_specific_success_response = 97
    RULE_general_response = 98

    ruleNames =  [ "start", "response", "generalReservedWord", "simpleSymbol", 
                   "quotedSymbol", "predefSymbol", "predefKeyword", "symbol", 
                   "numeral", "decimal", "hexadecimal", "binary", "string", 
                   "keyword", "spec_constant", "s_expr", "index", "identifier", 
                   "attribute_value", "attribute", "sort", "qual_identifer", 
                   "var_binding", "sorted_var", "pattern", "match_case", 
                   "term", "sort_symbol_decl", "meta_spec_constant", "fun_symbol_decl", 
                   "par_fun_symbol_decl", "theory_attribute", "theory_decl", 
                   "logic_attribue", "logic", "sort_dec", "selector_dec", 
                   "constructor_dec", "datatype_dec", "function_dec", "function_def", 
                   "prop_literal", "script", "cmd_assert", "cmd_checkSat", 
                   "cmd_checkUnsat", "cmd_checkSatAssuming", "cmd_declareConst", 
                   "cmd_declareDatatype", "cmd_declareDatatypes", "cmd_declareFun", 
                   "cmd_declareHeap", "cmd_declareSort", "cmd_defineFun", 
                   "cmd_defineFunRec", "cmd_defineFunsRec", "cmd_defineSort", 
                   "cmd_echo", "cmd_exit", "cmd_getAssertions", "cmd_getAssignment", 
                   "cmd_getInfo", "cmd_getModel", "cmd_getOption", "cmd_getProof", 
                   "cmd_getUnsatAssumptions", "cmd_getUnsatCore", "cmd_getValue", 
                   "cmd_pop", "cmd_push", "cmd_reset", "cmd_resetAssertions", 
                   "cmd_setInfo", "cmd_setLogic", "cmd_setOption", "heap_dec", 
                   "command", "b_value", "option", "info_flag", "error_behaviour", 
                   "reason_unknown", "model_response", "info_response", 
                   "valuation_pair", "t_valuation_pair", "check_sat_response", 
                   "echo_response", "get_assertions_response", "get_assignment_response", 
                   "get_info_response", "get_model_response", "get_option_response", 
                   "get_proof_response", "get_unsat_assump_response", "get_unsat_core_response", 
                   "get_value_response", "specific_success_response", "general_response" ]

    EOF = Token.EOF
    Comment=1
    ParOpen=2
    ParClose=3
    Semicolon=4
    String=5
    QuotedSymbol=6
    PS_Not=7
    PS_Bool=8
    PS_ContinuedExecution=9
    PS_Error=10
    PS_False=11
    PS_ImmediateExit=12
    PS_Incomplete=13
    PS_Logic=14
    PS_Memout=15
    PS_Sat=16
    PS_Success=17
    PS_Theory=18
    PS_True=19
    PS_Unknown=20
    PS_Unsupported=21
    PS_Unsat=22
    CMD_Assert=23
    CMD_CheckSat=24
    CMD_CheckSatAssuming=25
    CMD_CheckUnsat=26
    CMD_DeclareConst=27
    CMD_DeclareDatatype=28
    CMD_DeclareDatatypes=29
    CMD_DeclareFun=30
    CMD_DeclareHeap=31
    CMD_DeclareSort=32
    CMD_DefineFun=33
    CMD_DefineFunRec=34
    CMD_DefineFunsRec=35
    CMD_DefineSort=36
    CMD_Echo=37
    CMD_Exit=38
    CMD_GetAssertions=39
    CMD_GetAssignment=40
    CMD_GetInfo=41
    CMD_GetModel=42
    CMD_GetOption=43
    CMD_GetProof=44
    CMD_GetUnsatAssumptions=45
    CMD_GetUnsatCore=46
    CMD_GetValue=47
    CMD_Pop=48
    CMD_Push=49
    CMD_Reset=50
    CMD_ResetAssertions=51
    CMD_SetInfo=52
    CMD_SetLogic=53
    CMD_SetOption=54
    GRW_Exclamation=55
    GRW_Underscore=56
    GRW_As=57
    GRW_Binary=58
    GRW_Decimal=59
    GRW_Exists=60
    GRW_Hexadecimal=61
    GRW_Forall=62
    GRW_Let=63
    GRW_Match=64
    GRW_Numeral=65
    GRW_Par=66
    GRW_String=67
    Numeral=68
    Binary=69
    HexDecimal=70
    Decimal=71
    Colon=72
    PK_AllStatistics=73
    PK_AssertionStackLevels=74
    PK_Authors=75
    PK_Category=76
    PK_Chainable=77
    PK_Definition=78
    PK_DiagnosticOutputChannel=79
    PK_ErrorBehaviour=80
    PK_Extension=81
    PK_Funs=82
    PK_FunsDescription=83
    PK_GlobalDeclarations=84
    PK_InteractiveMode=85
    PK_Language=86
    PK_LeftAssoc=87
    PK_License=88
    PK_Named=89
    PK_Name=90
    PK_Notes=91
    PK_Pattern=92
    PK_PrintSuccess=93
    PK_ProduceAssertions=94
    PK_ProduceAssignments=95
    PK_ProduceModels=96
    PK_ProduceProofs=97
    PK_ProduceUnsatAssumptions=98
    PK_ProduceUnsatCores=99
    PK_RandomSeed=100
    PK_ReasonUnknown=101
    PK_RegularOutputChannel=102
    PK_ReproducibleResourceLimit=103
    PK_RightAssoc=104
    PK_SmtLibVersion=105
    PK_Sorts=106
    PK_SortsDescription=107
    PK_Source=108
    PK_Status=109
    PK_Theories=110
    PK_Values=111
    PK_Verbosity=112
    PK_Version=113
    UndefinedSymbol=114
    WS=115

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def script(self):
            return self.getTypedRuleContext(SLComp18Parser.ScriptContext,0)


        def EOF(self):
            return self.getToken(SLComp18Parser.EOF, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart" ):
                return visitor.visitStart(self)
            else:
                return visitor.visitChildren(self)




    def start(self):

        localctx = SLComp18Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.script()
            self.state = 199
            self.match(SLComp18Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResponseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_response(self):
            return self.getTypedRuleContext(SLComp18Parser.General_responseContext,0)


        def EOF(self):
            return self.getToken(SLComp18Parser.EOF, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResponse" ):
                listener.enterResponse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResponse" ):
                listener.exitResponse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResponse" ):
                return visitor.visitResponse(self)
            else:
                return visitor.visitChildren(self)




    def response(self):

        localctx = SLComp18Parser.ResponseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.general_response()
            self.state = 202
            self.match(SLComp18Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralReservedWordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRW_Exclamation(self):
            return self.getToken(SLComp18Parser.GRW_Exclamation, 0)

        def GRW_Underscore(self):
            return self.getToken(SLComp18Parser.GRW_Underscore, 0)

        def GRW_As(self):
            return self.getToken(SLComp18Parser.GRW_As, 0)

        def GRW_Binary(self):
            return self.getToken(SLComp18Parser.GRW_Binary, 0)

        def GRW_Decimal(self):
            return self.getToken(SLComp18Parser.GRW_Decimal, 0)

        def GRW_Exists(self):
            return self.getToken(SLComp18Parser.GRW_Exists, 0)

        def GRW_Hexadecimal(self):
            return self.getToken(SLComp18Parser.GRW_Hexadecimal, 0)

        def GRW_Forall(self):
            return self.getToken(SLComp18Parser.GRW_Forall, 0)

        def GRW_Let(self):
            return self.getToken(SLComp18Parser.GRW_Let, 0)

        def GRW_Match(self):
            return self.getToken(SLComp18Parser.GRW_Match, 0)

        def GRW_Numeral(self):
            return self.getToken(SLComp18Parser.GRW_Numeral, 0)

        def GRW_Par(self):
            return self.getToken(SLComp18Parser.GRW_Par, 0)

        def GRW_String(self):
            return self.getToken(SLComp18Parser.GRW_String, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_generalReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralReservedWord" ):
                listener.enterGeneralReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralReservedWord" ):
                listener.exitGeneralReservedWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneralReservedWord" ):
                return visitor.visitGeneralReservedWord(self)
            else:
                return visitor.visitChildren(self)




    def generalReservedWord(self):

        localctx = SLComp18Parser.GeneralReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_generalReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            _la = self._input.LA(1)
            if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (SLComp18Parser.GRW_Exclamation - 55)) | (1 << (SLComp18Parser.GRW_Underscore - 55)) | (1 << (SLComp18Parser.GRW_As - 55)) | (1 << (SLComp18Parser.GRW_Binary - 55)) | (1 << (SLComp18Parser.GRW_Decimal - 55)) | (1 << (SLComp18Parser.GRW_Exists - 55)) | (1 << (SLComp18Parser.GRW_Hexadecimal - 55)) | (1 << (SLComp18Parser.GRW_Forall - 55)) | (1 << (SLComp18Parser.GRW_Let - 55)) | (1 << (SLComp18Parser.GRW_Match - 55)) | (1 << (SLComp18Parser.GRW_Numeral - 55)) | (1 << (SLComp18Parser.GRW_Par - 55)) | (1 << (SLComp18Parser.GRW_String - 55)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefSymbol(self):
            return self.getTypedRuleContext(SLComp18Parser.PredefSymbolContext,0)


        def UndefinedSymbol(self):
            return self.getToken(SLComp18Parser.UndefinedSymbol, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_simpleSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSymbol" ):
                listener.enterSimpleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSymbol" ):
                listener.exitSimpleSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleSymbol" ):
                return visitor.visitSimpleSymbol(self)
            else:
                return visitor.visitChildren(self)




    def simpleSymbol(self):

        localctx = SLComp18Parser.SimpleSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_simpleSymbol)
        try:
            self.state = 208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.PS_Not, SLComp18Parser.PS_Bool, SLComp18Parser.PS_ContinuedExecution, SLComp18Parser.PS_Error, SLComp18Parser.PS_False, SLComp18Parser.PS_ImmediateExit, SLComp18Parser.PS_Incomplete, SLComp18Parser.PS_Logic, SLComp18Parser.PS_Memout, SLComp18Parser.PS_Sat, SLComp18Parser.PS_Success, SLComp18Parser.PS_Theory, SLComp18Parser.PS_True, SLComp18Parser.PS_Unknown, SLComp18Parser.PS_Unsupported, SLComp18Parser.PS_Unsat]:
                self.enterOuterAlt(localctx, 1)
                self.state = 206
                self.predefSymbol()
                pass
            elif token in [SLComp18Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 207
                self.match(SLComp18Parser.UndefinedSymbol)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuotedSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QuotedSymbol(self):
            return self.getToken(SLComp18Parser.QuotedSymbol, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_quotedSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedSymbol" ):
                listener.enterQuotedSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedSymbol" ):
                listener.exitQuotedSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedSymbol" ):
                return visitor.visitQuotedSymbol(self)
            else:
                return visitor.visitChildren(self)




    def quotedSymbol(self):

        localctx = SLComp18Parser.QuotedSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_quotedSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(SLComp18Parser.QuotedSymbol)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredefSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Not(self):
            return self.getToken(SLComp18Parser.PS_Not, 0)

        def PS_Bool(self):
            return self.getToken(SLComp18Parser.PS_Bool, 0)

        def PS_ContinuedExecution(self):
            return self.getToken(SLComp18Parser.PS_ContinuedExecution, 0)

        def PS_Error(self):
            return self.getToken(SLComp18Parser.PS_Error, 0)

        def PS_False(self):
            return self.getToken(SLComp18Parser.PS_False, 0)

        def PS_ImmediateExit(self):
            return self.getToken(SLComp18Parser.PS_ImmediateExit, 0)

        def PS_Incomplete(self):
            return self.getToken(SLComp18Parser.PS_Incomplete, 0)

        def PS_Logic(self):
            return self.getToken(SLComp18Parser.PS_Logic, 0)

        def PS_Memout(self):
            return self.getToken(SLComp18Parser.PS_Memout, 0)

        def PS_Sat(self):
            return self.getToken(SLComp18Parser.PS_Sat, 0)

        def PS_Success(self):
            return self.getToken(SLComp18Parser.PS_Success, 0)

        def PS_Theory(self):
            return self.getToken(SLComp18Parser.PS_Theory, 0)

        def PS_True(self):
            return self.getToken(SLComp18Parser.PS_True, 0)

        def PS_Unknown(self):
            return self.getToken(SLComp18Parser.PS_Unknown, 0)

        def PS_Unsupported(self):
            return self.getToken(SLComp18Parser.PS_Unsupported, 0)

        def PS_Unsat(self):
            return self.getToken(SLComp18Parser.PS_Unsat, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_predefSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefSymbol" ):
                listener.enterPredefSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefSymbol" ):
                listener.exitPredefSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredefSymbol" ):
                return visitor.visitPredefSymbol(self)
            else:
                return visitor.visitChildren(self)




    def predefSymbol(self):

        localctx = SLComp18Parser.PredefSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_predefSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredefKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AllStatistics(self):
            return self.getToken(SLComp18Parser.PK_AllStatistics, 0)

        def PK_AssertionStackLevels(self):
            return self.getToken(SLComp18Parser.PK_AssertionStackLevels, 0)

        def PK_Authors(self):
            return self.getToken(SLComp18Parser.PK_Authors, 0)

        def PK_Category(self):
            return self.getToken(SLComp18Parser.PK_Category, 0)

        def PK_Chainable(self):
            return self.getToken(SLComp18Parser.PK_Chainable, 0)

        def PK_Definition(self):
            return self.getToken(SLComp18Parser.PK_Definition, 0)

        def PK_DiagnosticOutputChannel(self):
            return self.getToken(SLComp18Parser.PK_DiagnosticOutputChannel, 0)

        def PK_ErrorBehaviour(self):
            return self.getToken(SLComp18Parser.PK_ErrorBehaviour, 0)

        def PK_Extension(self):
            return self.getToken(SLComp18Parser.PK_Extension, 0)

        def PK_Funs(self):
            return self.getToken(SLComp18Parser.PK_Funs, 0)

        def PK_FunsDescription(self):
            return self.getToken(SLComp18Parser.PK_FunsDescription, 0)

        def PK_GlobalDeclarations(self):
            return self.getToken(SLComp18Parser.PK_GlobalDeclarations, 0)

        def PK_InteractiveMode(self):
            return self.getToken(SLComp18Parser.PK_InteractiveMode, 0)

        def PK_Language(self):
            return self.getToken(SLComp18Parser.PK_Language, 0)

        def PK_LeftAssoc(self):
            return self.getToken(SLComp18Parser.PK_LeftAssoc, 0)

        def PK_License(self):
            return self.getToken(SLComp18Parser.PK_License, 0)

        def PK_Named(self):
            return self.getToken(SLComp18Parser.PK_Named, 0)

        def PK_Name(self):
            return self.getToken(SLComp18Parser.PK_Name, 0)

        def PK_Notes(self):
            return self.getToken(SLComp18Parser.PK_Notes, 0)

        def PK_Pattern(self):
            return self.getToken(SLComp18Parser.PK_Pattern, 0)

        def PK_PrintSuccess(self):
            return self.getToken(SLComp18Parser.PK_PrintSuccess, 0)

        def PK_ProduceAssertions(self):
            return self.getToken(SLComp18Parser.PK_ProduceAssertions, 0)

        def PK_ProduceAssignments(self):
            return self.getToken(SLComp18Parser.PK_ProduceAssignments, 0)

        def PK_ProduceModels(self):
            return self.getToken(SLComp18Parser.PK_ProduceModels, 0)

        def PK_ProduceProofs(self):
            return self.getToken(SLComp18Parser.PK_ProduceProofs, 0)

        def PK_ProduceUnsatAssumptions(self):
            return self.getToken(SLComp18Parser.PK_ProduceUnsatAssumptions, 0)

        def PK_ProduceUnsatCores(self):
            return self.getToken(SLComp18Parser.PK_ProduceUnsatCores, 0)

        def PK_RandomSeed(self):
            return self.getToken(SLComp18Parser.PK_RandomSeed, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SLComp18Parser.PK_ReasonUnknown, 0)

        def PK_RegularOutputChannel(self):
            return self.getToken(SLComp18Parser.PK_RegularOutputChannel, 0)

        def PK_ReproducibleResourceLimit(self):
            return self.getToken(SLComp18Parser.PK_ReproducibleResourceLimit, 0)

        def PK_RightAssoc(self):
            return self.getToken(SLComp18Parser.PK_RightAssoc, 0)

        def PK_SmtLibVersion(self):
            return self.getToken(SLComp18Parser.PK_SmtLibVersion, 0)

        def PK_Sorts(self):
            return self.getToken(SLComp18Parser.PK_Sorts, 0)

        def PK_SortsDescription(self):
            return self.getToken(SLComp18Parser.PK_SortsDescription, 0)

        def PK_Source(self):
            return self.getToken(SLComp18Parser.PK_Source, 0)

        def PK_Status(self):
            return self.getToken(SLComp18Parser.PK_Status, 0)

        def PK_Theories(self):
            return self.getToken(SLComp18Parser.PK_Theories, 0)

        def PK_Values(self):
            return self.getToken(SLComp18Parser.PK_Values, 0)

        def PK_Verbosity(self):
            return self.getToken(SLComp18Parser.PK_Verbosity, 0)

        def PK_Version(self):
            return self.getToken(SLComp18Parser.PK_Version, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_predefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefKeyword" ):
                listener.enterPredefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefKeyword" ):
                listener.exitPredefKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredefKeyword" ):
                return visitor.visitPredefKeyword(self)
            else:
                return visitor.visitChildren(self)




    def predefKeyword(self):

        localctx = SLComp18Parser.PredefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_predefKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (SLComp18Parser.PK_AllStatistics - 73)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 73)) | (1 << (SLComp18Parser.PK_Authors - 73)) | (1 << (SLComp18Parser.PK_Category - 73)) | (1 << (SLComp18Parser.PK_Chainable - 73)) | (1 << (SLComp18Parser.PK_Definition - 73)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 73)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 73)) | (1 << (SLComp18Parser.PK_Extension - 73)) | (1 << (SLComp18Parser.PK_Funs - 73)) | (1 << (SLComp18Parser.PK_FunsDescription - 73)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 73)) | (1 << (SLComp18Parser.PK_InteractiveMode - 73)) | (1 << (SLComp18Parser.PK_Language - 73)) | (1 << (SLComp18Parser.PK_LeftAssoc - 73)) | (1 << (SLComp18Parser.PK_License - 73)) | (1 << (SLComp18Parser.PK_Named - 73)) | (1 << (SLComp18Parser.PK_Name - 73)) | (1 << (SLComp18Parser.PK_Notes - 73)) | (1 << (SLComp18Parser.PK_Pattern - 73)) | (1 << (SLComp18Parser.PK_PrintSuccess - 73)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 73)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 73)) | (1 << (SLComp18Parser.PK_ProduceModels - 73)) | (1 << (SLComp18Parser.PK_ProduceProofs - 73)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 73)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 73)) | (1 << (SLComp18Parser.PK_RandomSeed - 73)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 73)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 73)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 73)) | (1 << (SLComp18Parser.PK_RightAssoc - 73)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 73)) | (1 << (SLComp18Parser.PK_Sorts - 73)) | (1 << (SLComp18Parser.PK_SortsDescription - 73)) | (1 << (SLComp18Parser.PK_Source - 73)) | (1 << (SLComp18Parser.PK_Status - 73)) | (1 << (SLComp18Parser.PK_Theories - 73)) | (1 << (SLComp18Parser.PK_Values - 73)) | (1 << (SLComp18Parser.PK_Verbosity - 73)) | (1 << (SLComp18Parser.PK_Version - 73)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleSymbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SimpleSymbolContext,0)


        def quotedSymbol(self):
            return self.getTypedRuleContext(SLComp18Parser.QuotedSymbolContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = SLComp18Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_symbol)
        try:
            self.state = 218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.PS_Not, SLComp18Parser.PS_Bool, SLComp18Parser.PS_ContinuedExecution, SLComp18Parser.PS_Error, SLComp18Parser.PS_False, SLComp18Parser.PS_ImmediateExit, SLComp18Parser.PS_Incomplete, SLComp18Parser.PS_Logic, SLComp18Parser.PS_Memout, SLComp18Parser.PS_Sat, SLComp18Parser.PS_Success, SLComp18Parser.PS_Theory, SLComp18Parser.PS_True, SLComp18Parser.PS_Unknown, SLComp18Parser.PS_Unsupported, SLComp18Parser.PS_Unsat, SLComp18Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 216
                self.simpleSymbol()
                pass
            elif token in [SLComp18Parser.QuotedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self.quotedSymbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumeralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Numeral(self):
            return self.getToken(SLComp18Parser.Numeral, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_numeral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeral" ):
                listener.enterNumeral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeral" ):
                listener.exitNumeral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeral" ):
                return visitor.visitNumeral(self)
            else:
                return visitor.visitChildren(self)




    def numeral(self):

        localctx = SLComp18Parser.NumeralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_numeral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(SLComp18Parser.Numeral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(SLComp18Parser.Decimal, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal" ):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)




    def decimal(self):

        localctx = SLComp18Parser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_decimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(SLComp18Parser.Decimal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexadecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexDecimal(self):
            return self.getToken(SLComp18Parser.HexDecimal, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_hexadecimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimal" ):
                listener.enterHexadecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimal" ):
                listener.exitHexadecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexadecimal" ):
                return visitor.visitHexadecimal(self)
            else:
                return visitor.visitChildren(self)




    def hexadecimal(self):

        localctx = SLComp18Parser.HexadecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_hexadecimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(SLComp18Parser.HexDecimal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Binary(self):
            return self.getToken(SLComp18Parser.Binary, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary" ):
                return visitor.visitBinary(self)
            else:
                return visitor.visitChildren(self)




    def binary(self):

        localctx = SLComp18Parser.BinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_binary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(SLComp18Parser.Binary)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def String(self):
            return self.getToken(SLComp18Parser.String, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = SLComp18Parser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(SLComp18Parser.String)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefKeyword(self):
            return self.getTypedRuleContext(SLComp18Parser.PredefKeywordContext,0)


        def Colon(self):
            return self.getToken(SLComp18Parser.Colon, 0)

        def simpleSymbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SimpleSymbolContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = SLComp18Parser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_keyword)
        try:
            self.state = 233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.PK_AllStatistics, SLComp18Parser.PK_AssertionStackLevels, SLComp18Parser.PK_Authors, SLComp18Parser.PK_Category, SLComp18Parser.PK_Chainable, SLComp18Parser.PK_Definition, SLComp18Parser.PK_DiagnosticOutputChannel, SLComp18Parser.PK_ErrorBehaviour, SLComp18Parser.PK_Extension, SLComp18Parser.PK_Funs, SLComp18Parser.PK_FunsDescription, SLComp18Parser.PK_GlobalDeclarations, SLComp18Parser.PK_InteractiveMode, SLComp18Parser.PK_Language, SLComp18Parser.PK_LeftAssoc, SLComp18Parser.PK_License, SLComp18Parser.PK_Named, SLComp18Parser.PK_Name, SLComp18Parser.PK_Notes, SLComp18Parser.PK_Pattern, SLComp18Parser.PK_PrintSuccess, SLComp18Parser.PK_ProduceAssertions, SLComp18Parser.PK_ProduceAssignments, SLComp18Parser.PK_ProduceModels, SLComp18Parser.PK_ProduceProofs, SLComp18Parser.PK_ProduceUnsatAssumptions, SLComp18Parser.PK_ProduceUnsatCores, SLComp18Parser.PK_RandomSeed, SLComp18Parser.PK_ReasonUnknown, SLComp18Parser.PK_RegularOutputChannel, SLComp18Parser.PK_ReproducibleResourceLimit, SLComp18Parser.PK_RightAssoc, SLComp18Parser.PK_SmtLibVersion, SLComp18Parser.PK_Sorts, SLComp18Parser.PK_SortsDescription, SLComp18Parser.PK_Source, SLComp18Parser.PK_Status, SLComp18Parser.PK_Theories, SLComp18Parser.PK_Values, SLComp18Parser.PK_Verbosity, SLComp18Parser.PK_Version]:
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                self.predefKeyword()
                pass
            elif token in [SLComp18Parser.Colon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 231
                self.match(SLComp18Parser.Colon)
                self.state = 232
                self.simpleSymbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spec_constantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeral(self):
            return self.getTypedRuleContext(SLComp18Parser.NumeralContext,0)


        def decimal(self):
            return self.getTypedRuleContext(SLComp18Parser.DecimalContext,0)


        def hexadecimal(self):
            return self.getTypedRuleContext(SLComp18Parser.HexadecimalContext,0)


        def binary(self):
            return self.getTypedRuleContext(SLComp18Parser.BinaryContext,0)


        def string(self):
            return self.getTypedRuleContext(SLComp18Parser.StringContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_spec_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpec_constant" ):
                listener.enterSpec_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpec_constant" ):
                listener.exitSpec_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpec_constant" ):
                return visitor.visitSpec_constant(self)
            else:
                return visitor.visitChildren(self)




    def spec_constant(self):

        localctx = SLComp18Parser.Spec_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_spec_constant)
        try:
            self.state = 240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.Numeral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 235
                self.numeral()
                pass
            elif token in [SLComp18Parser.Decimal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 236
                self.decimal()
                pass
            elif token in [SLComp18Parser.HexDecimal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 237
                self.hexadecimal()
                pass
            elif token in [SLComp18Parser.Binary]:
                self.enterOuterAlt(localctx, 4)
                self.state = 238
                self.binary()
                pass
            elif token in [SLComp18Parser.String]:
                self.enterOuterAlt(localctx, 5)
                self.state = 239
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class S_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SLComp18Parser.Spec_constantContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def keyword(self):
            return self.getTypedRuleContext(SLComp18Parser.KeywordContext,0)


        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def s_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.S_exprContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.S_exprContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_s_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_expr" ):
                listener.enterS_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_expr" ):
                listener.exitS_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitS_expr" ):
                return visitor.visitS_expr(self)
            else:
                return visitor.visitChildren(self)




    def s_expr(self):

        localctx = SLComp18Parser.S_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_expr)
        self._la = 0 # Token type
        try:
            self.state = 253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.String, SLComp18Parser.Numeral, SLComp18Parser.Binary, SLComp18Parser.HexDecimal, SLComp18Parser.Decimal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 242
                self.spec_constant()
                pass
            elif token in [SLComp18Parser.QuotedSymbol, SLComp18Parser.PS_Not, SLComp18Parser.PS_Bool, SLComp18Parser.PS_ContinuedExecution, SLComp18Parser.PS_Error, SLComp18Parser.PS_False, SLComp18Parser.PS_ImmediateExit, SLComp18Parser.PS_Incomplete, SLComp18Parser.PS_Logic, SLComp18Parser.PS_Memout, SLComp18Parser.PS_Sat, SLComp18Parser.PS_Success, SLComp18Parser.PS_Theory, SLComp18Parser.PS_True, SLComp18Parser.PS_Unknown, SLComp18Parser.PS_Unsupported, SLComp18Parser.PS_Unsat, SLComp18Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 243
                self.symbol()
                pass
            elif token in [SLComp18Parser.Colon, SLComp18Parser.PK_AllStatistics, SLComp18Parser.PK_AssertionStackLevels, SLComp18Parser.PK_Authors, SLComp18Parser.PK_Category, SLComp18Parser.PK_Chainable, SLComp18Parser.PK_Definition, SLComp18Parser.PK_DiagnosticOutputChannel, SLComp18Parser.PK_ErrorBehaviour, SLComp18Parser.PK_Extension, SLComp18Parser.PK_Funs, SLComp18Parser.PK_FunsDescription, SLComp18Parser.PK_GlobalDeclarations, SLComp18Parser.PK_InteractiveMode, SLComp18Parser.PK_Language, SLComp18Parser.PK_LeftAssoc, SLComp18Parser.PK_License, SLComp18Parser.PK_Named, SLComp18Parser.PK_Name, SLComp18Parser.PK_Notes, SLComp18Parser.PK_Pattern, SLComp18Parser.PK_PrintSuccess, SLComp18Parser.PK_ProduceAssertions, SLComp18Parser.PK_ProduceAssignments, SLComp18Parser.PK_ProduceModels, SLComp18Parser.PK_ProduceProofs, SLComp18Parser.PK_ProduceUnsatAssumptions, SLComp18Parser.PK_ProduceUnsatCores, SLComp18Parser.PK_RandomSeed, SLComp18Parser.PK_ReasonUnknown, SLComp18Parser.PK_RegularOutputChannel, SLComp18Parser.PK_ReproducibleResourceLimit, SLComp18Parser.PK_RightAssoc, SLComp18Parser.PK_SmtLibVersion, SLComp18Parser.PK_Sorts, SLComp18Parser.PK_SortsDescription, SLComp18Parser.PK_Source, SLComp18Parser.PK_Status, SLComp18Parser.PK_Theories, SLComp18Parser.PK_Values, SLComp18Parser.PK_Verbosity, SLComp18Parser.PK_Version]:
                self.enterOuterAlt(localctx, 3)
                self.state = 244
                self.keyword()
                pass
            elif token in [SLComp18Parser.ParOpen]:
                self.enterOuterAlt(localctx, 4)
                self.state = 245
                self.match(SLComp18Parser.ParOpen)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.String) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SLComp18Parser.Numeral - 68)) | (1 << (SLComp18Parser.Binary - 68)) | (1 << (SLComp18Parser.HexDecimal - 68)) | (1 << (SLComp18Parser.Decimal - 68)) | (1 << (SLComp18Parser.Colon - 68)) | (1 << (SLComp18Parser.PK_AllStatistics - 68)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 68)) | (1 << (SLComp18Parser.PK_Authors - 68)) | (1 << (SLComp18Parser.PK_Category - 68)) | (1 << (SLComp18Parser.PK_Chainable - 68)) | (1 << (SLComp18Parser.PK_Definition - 68)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 68)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 68)) | (1 << (SLComp18Parser.PK_Extension - 68)) | (1 << (SLComp18Parser.PK_Funs - 68)) | (1 << (SLComp18Parser.PK_FunsDescription - 68)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 68)) | (1 << (SLComp18Parser.PK_InteractiveMode - 68)) | (1 << (SLComp18Parser.PK_Language - 68)) | (1 << (SLComp18Parser.PK_LeftAssoc - 68)) | (1 << (SLComp18Parser.PK_License - 68)) | (1 << (SLComp18Parser.PK_Named - 68)) | (1 << (SLComp18Parser.PK_Name - 68)) | (1 << (SLComp18Parser.PK_Notes - 68)) | (1 << (SLComp18Parser.PK_Pattern - 68)) | (1 << (SLComp18Parser.PK_PrintSuccess - 68)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 68)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 68)) | (1 << (SLComp18Parser.PK_ProduceModels - 68)) | (1 << (SLComp18Parser.PK_ProduceProofs - 68)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 68)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 68)) | (1 << (SLComp18Parser.PK_RandomSeed - 68)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 68)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 68)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 68)) | (1 << (SLComp18Parser.PK_RightAssoc - 68)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 68)) | (1 << (SLComp18Parser.PK_Sorts - 68)) | (1 << (SLComp18Parser.PK_SortsDescription - 68)) | (1 << (SLComp18Parser.PK_Source - 68)) | (1 << (SLComp18Parser.PK_Status - 68)) | (1 << (SLComp18Parser.PK_Theories - 68)) | (1 << (SLComp18Parser.PK_Values - 68)) | (1 << (SLComp18Parser.PK_Verbosity - 68)) | (1 << (SLComp18Parser.PK_Version - 68)) | (1 << (SLComp18Parser.UndefinedSymbol - 68)))) != 0):
                    self.state = 246
                    self.s_expr()
                    self.state = 251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 252
                self.match(SLComp18Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeral(self):
            return self.getTypedRuleContext(SLComp18Parser.NumeralContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = SLComp18Parser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_index)
        try:
            self.state = 257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.Numeral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 255
                self.numeral()
                pass
            elif token in [SLComp18Parser.QuotedSymbol, SLComp18Parser.PS_Not, SLComp18Parser.PS_Bool, SLComp18Parser.PS_ContinuedExecution, SLComp18Parser.PS_Error, SLComp18Parser.PS_False, SLComp18Parser.PS_ImmediateExit, SLComp18Parser.PS_Incomplete, SLComp18Parser.PS_Logic, SLComp18Parser.PS_Memout, SLComp18Parser.PS_Sat, SLComp18Parser.PS_Success, SLComp18Parser.PS_Theory, SLComp18Parser.PS_True, SLComp18Parser.PS_Unknown, SLComp18Parser.PS_Unsupported, SLComp18Parser.PS_Unsat, SLComp18Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def GRW_Underscore(self):
            return self.getToken(SLComp18Parser.GRW_Underscore, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.IndexContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.IndexContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SLComp18Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.QuotedSymbol, SLComp18Parser.PS_Not, SLComp18Parser.PS_Bool, SLComp18Parser.PS_ContinuedExecution, SLComp18Parser.PS_Error, SLComp18Parser.PS_False, SLComp18Parser.PS_ImmediateExit, SLComp18Parser.PS_Incomplete, SLComp18Parser.PS_Logic, SLComp18Parser.PS_Memout, SLComp18Parser.PS_Sat, SLComp18Parser.PS_Success, SLComp18Parser.PS_Theory, SLComp18Parser.PS_True, SLComp18Parser.PS_Unknown, SLComp18Parser.PS_Unsupported, SLComp18Parser.PS_Unsat, SLComp18Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.symbol()
                pass
            elif token in [SLComp18Parser.ParOpen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.match(SLComp18Parser.ParOpen)
                self.state = 261
                self.match(SLComp18Parser.GRW_Underscore)
                self.state = 262
                self.symbol()
                self.state = 264 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 263
                    self.index()
                    self.state = 266 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.Numeral or _la==SLComp18Parser.UndefinedSymbol):
                        break

                self.state = 268
                self.match(SLComp18Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SLComp18Parser.Spec_constantContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def s_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.S_exprContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.S_exprContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_attribute_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_value" ):
                listener.enterAttribute_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_value" ):
                listener.exitAttribute_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_value" ):
                return visitor.visitAttribute_value(self)
            else:
                return visitor.visitChildren(self)




    def attribute_value(self):

        localctx = SLComp18Parser.Attribute_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attribute_value)
        self._la = 0 # Token type
        try:
            self.state = 282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.String, SLComp18Parser.Numeral, SLComp18Parser.Binary, SLComp18Parser.HexDecimal, SLComp18Parser.Decimal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.spec_constant()
                pass
            elif token in [SLComp18Parser.QuotedSymbol, SLComp18Parser.PS_Not, SLComp18Parser.PS_Bool, SLComp18Parser.PS_ContinuedExecution, SLComp18Parser.PS_Error, SLComp18Parser.PS_False, SLComp18Parser.PS_ImmediateExit, SLComp18Parser.PS_Incomplete, SLComp18Parser.PS_Logic, SLComp18Parser.PS_Memout, SLComp18Parser.PS_Sat, SLComp18Parser.PS_Success, SLComp18Parser.PS_Theory, SLComp18Parser.PS_True, SLComp18Parser.PS_Unknown, SLComp18Parser.PS_Unsupported, SLComp18Parser.PS_Unsat, SLComp18Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.symbol()
                pass
            elif token in [SLComp18Parser.ParOpen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 274
                self.match(SLComp18Parser.ParOpen)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.String) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SLComp18Parser.Numeral - 68)) | (1 << (SLComp18Parser.Binary - 68)) | (1 << (SLComp18Parser.HexDecimal - 68)) | (1 << (SLComp18Parser.Decimal - 68)) | (1 << (SLComp18Parser.Colon - 68)) | (1 << (SLComp18Parser.PK_AllStatistics - 68)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 68)) | (1 << (SLComp18Parser.PK_Authors - 68)) | (1 << (SLComp18Parser.PK_Category - 68)) | (1 << (SLComp18Parser.PK_Chainable - 68)) | (1 << (SLComp18Parser.PK_Definition - 68)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 68)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 68)) | (1 << (SLComp18Parser.PK_Extension - 68)) | (1 << (SLComp18Parser.PK_Funs - 68)) | (1 << (SLComp18Parser.PK_FunsDescription - 68)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 68)) | (1 << (SLComp18Parser.PK_InteractiveMode - 68)) | (1 << (SLComp18Parser.PK_Language - 68)) | (1 << (SLComp18Parser.PK_LeftAssoc - 68)) | (1 << (SLComp18Parser.PK_License - 68)) | (1 << (SLComp18Parser.PK_Named - 68)) | (1 << (SLComp18Parser.PK_Name - 68)) | (1 << (SLComp18Parser.PK_Notes - 68)) | (1 << (SLComp18Parser.PK_Pattern - 68)) | (1 << (SLComp18Parser.PK_PrintSuccess - 68)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 68)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 68)) | (1 << (SLComp18Parser.PK_ProduceModels - 68)) | (1 << (SLComp18Parser.PK_ProduceProofs - 68)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 68)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 68)) | (1 << (SLComp18Parser.PK_RandomSeed - 68)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 68)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 68)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 68)) | (1 << (SLComp18Parser.PK_RightAssoc - 68)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 68)) | (1 << (SLComp18Parser.PK_Sorts - 68)) | (1 << (SLComp18Parser.PK_SortsDescription - 68)) | (1 << (SLComp18Parser.PK_Source - 68)) | (1 << (SLComp18Parser.PK_Status - 68)) | (1 << (SLComp18Parser.PK_Theories - 68)) | (1 << (SLComp18Parser.PK_Values - 68)) | (1 << (SLComp18Parser.PK_Verbosity - 68)) | (1 << (SLComp18Parser.PK_Version - 68)) | (1 << (SLComp18Parser.UndefinedSymbol - 68)))) != 0):
                    self.state = 275
                    self.s_expr()
                    self.state = 280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 281
                self.match(SLComp18Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(SLComp18Parser.KeywordContext,0)


        def attribute_value(self):
            return self.getTypedRuleContext(SLComp18Parser.Attribute_valueContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = SLComp18Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attribute)
        try:
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.keyword()
                self.state = 286
                self.attribute_value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SLComp18Parser.IdentifierContext,0)


        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SortContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SortContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_sort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort" ):
                listener.enterSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort" ):
                listener.exitSort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort" ):
                return visitor.visitSort(self)
            else:
                return visitor.visitChildren(self)




    def sort(self):

        localctx = SLComp18Parser.SortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_sort)
        self._la = 0 # Token type
        try:
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 290
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 291
                self.match(SLComp18Parser.ParOpen)
                self.state = 292
                self.identifier()
                self.state = 294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 293
                    self.sort()
                    self.state = 296 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol):
                        break

                self.state = 298
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qual_identiferContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SLComp18Parser.IdentifierContext,0)


        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def GRW_As(self):
            return self.getToken(SLComp18Parser.GRW_As, 0)

        def sort(self):
            return self.getTypedRuleContext(SLComp18Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_qual_identifer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQual_identifer" ):
                listener.enterQual_identifer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQual_identifer" ):
                listener.exitQual_identifer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQual_identifer" ):
                return visitor.visitQual_identifer(self)
            else:
                return visitor.visitChildren(self)




    def qual_identifer(self):

        localctx = SLComp18Parser.Qual_identiferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_qual_identifer)
        try:
            self.state = 309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.match(SLComp18Parser.ParOpen)
                self.state = 304
                self.match(SLComp18Parser.GRW_As)
                self.state = 305
                self.identifier()
                self.state = 306
                self.sort()
                self.state = 307
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def term(self):
            return self.getTypedRuleContext(SLComp18Parser.TermContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_var_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_binding" ):
                listener.enterVar_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_binding" ):
                listener.exitVar_binding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_binding" ):
                return visitor.visitVar_binding(self)
            else:
                return visitor.visitChildren(self)




    def var_binding(self):

        localctx = SLComp18Parser.Var_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_var_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(SLComp18Parser.ParOpen)
            self.state = 312
            self.symbol()
            self.state = 313
            self.term()
            self.state = 314
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sorted_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def sort(self):
            return self.getTypedRuleContext(SLComp18Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_sorted_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_var" ):
                listener.enterSorted_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_var" ):
                listener.exitSorted_var(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSorted_var" ):
                return visitor.visitSorted_var(self)
            else:
                return visitor.visitChildren(self)




    def sorted_var(self):

        localctx = SLComp18Parser.Sorted_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sorted_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(SLComp18Parser.ParOpen)
            self.state = 317
            self.symbol()
            self.state = 318
            self.sort()
            self.state = 319
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SymbolContext,i)


        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = SLComp18Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.QuotedSymbol, SLComp18Parser.PS_Not, SLComp18Parser.PS_Bool, SLComp18Parser.PS_ContinuedExecution, SLComp18Parser.PS_Error, SLComp18Parser.PS_False, SLComp18Parser.PS_ImmediateExit, SLComp18Parser.PS_Incomplete, SLComp18Parser.PS_Logic, SLComp18Parser.PS_Memout, SLComp18Parser.PS_Sat, SLComp18Parser.PS_Success, SLComp18Parser.PS_Theory, SLComp18Parser.PS_True, SLComp18Parser.PS_Unknown, SLComp18Parser.PS_Unsupported, SLComp18Parser.PS_Unsat, SLComp18Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.symbol()
                pass
            elif token in [SLComp18Parser.ParOpen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.match(SLComp18Parser.ParOpen)
                self.state = 323
                self.symbol()
                self.state = 325 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 324
                    self.symbol()
                    self.state = 327 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol):
                        break

                self.state = 329
                self.match(SLComp18Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_caseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def pattern(self):
            return self.getTypedRuleContext(SLComp18Parser.PatternContext,0)


        def term(self):
            return self.getTypedRuleContext(SLComp18Parser.TermContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_match_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_case" ):
                listener.enterMatch_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_case" ):
                listener.exitMatch_case(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_case" ):
                return visitor.visitMatch_case(self)
            else:
                return visitor.visitChildren(self)




    def match_case(self):

        localctx = SLComp18Parser.Match_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_match_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(SLComp18Parser.ParOpen)
            self.state = 334
            self.pattern()
            self.state = 335
            self.term()
            self.state = 336
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SLComp18Parser.Spec_constantContext,0)


        def qual_identifer(self):
            return self.getTypedRuleContext(SLComp18Parser.Qual_identiferContext,0)


        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParOpen)
            else:
                return self.getToken(SLComp18Parser.ParOpen, i)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParClose)
            else:
                return self.getToken(SLComp18Parser.ParClose, i)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.TermContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.TermContext,i)


        def GRW_Let(self):
            return self.getToken(SLComp18Parser.GRW_Let, 0)

        def var_binding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Var_bindingContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Var_bindingContext,i)


        def GRW_Forall(self):
            return self.getToken(SLComp18Parser.GRW_Forall, 0)

        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Sorted_varContext,i)


        def GRW_Exists(self):
            return self.getToken(SLComp18Parser.GRW_Exists, 0)

        def GRW_Match(self):
            return self.getToken(SLComp18Parser.GRW_Match, 0)

        def match_case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Match_caseContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Match_caseContext,i)


        def GRW_Exclamation(self):
            return self.getToken(SLComp18Parser.GRW_Exclamation, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = SLComp18Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.state = 407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.spec_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.qual_identifer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 340
                self.match(SLComp18Parser.ParOpen)
                self.state = 341
                self.qual_identifer()
                self.state = 343 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 342
                    self.term()
                    self.state = 345 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.String) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SLComp18Parser.Numeral - 68)) | (1 << (SLComp18Parser.Binary - 68)) | (1 << (SLComp18Parser.HexDecimal - 68)) | (1 << (SLComp18Parser.Decimal - 68)) | (1 << (SLComp18Parser.UndefinedSymbol - 68)))) != 0)):
                        break

                self.state = 347
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 349
                self.match(SLComp18Parser.ParOpen)
                self.state = 350
                self.match(SLComp18Parser.GRW_Let)
                self.state = 351
                self.match(SLComp18Parser.ParOpen)
                self.state = 353 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 352
                    self.var_binding()
                    self.state = 355 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 357
                self.match(SLComp18Parser.ParClose)
                self.state = 358
                self.term()
                self.state = 359
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 361
                self.match(SLComp18Parser.ParOpen)
                self.state = 362
                self.match(SLComp18Parser.GRW_Forall)
                self.state = 363
                self.match(SLComp18Parser.ParOpen)
                self.state = 365 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 364
                    self.sorted_var()
                    self.state = 367 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 369
                self.match(SLComp18Parser.ParClose)
                self.state = 370
                self.term()
                self.state = 371
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 373
                self.match(SLComp18Parser.ParOpen)
                self.state = 374
                self.match(SLComp18Parser.GRW_Exists)
                self.state = 375
                self.match(SLComp18Parser.ParOpen)
                self.state = 377 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 376
                    self.sorted_var()
                    self.state = 379 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 381
                self.match(SLComp18Parser.ParClose)
                self.state = 382
                self.term()
                self.state = 383
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 385
                self.match(SLComp18Parser.ParOpen)
                self.state = 386
                self.match(SLComp18Parser.GRW_Match)
                self.state = 387
                self.term()
                self.state = 388
                self.match(SLComp18Parser.ParOpen)
                self.state = 390 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 389
                    self.match_case()
                    self.state = 392 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 394
                self.match(SLComp18Parser.ParClose)
                self.state = 395
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 397
                self.match(SLComp18Parser.ParOpen)
                self.state = 398
                self.match(SLComp18Parser.GRW_Exclamation)
                self.state = 399
                self.term()
                self.state = 401 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 400
                    self.attribute()
                    self.state = 403 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0)):
                        break

                self.state = 405
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sort_symbol_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def identifier(self):
            return self.getTypedRuleContext(SLComp18Parser.IdentifierContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SLComp18Parser.NumeralContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_sort_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_symbol_decl" ):
                listener.enterSort_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_symbol_decl" ):
                listener.exitSort_symbol_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_symbol_decl" ):
                return visitor.visitSort_symbol_decl(self)
            else:
                return visitor.visitChildren(self)




    def sort_symbol_decl(self):

        localctx = SLComp18Parser.Sort_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_sort_symbol_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(SLComp18Parser.ParOpen)
            self.state = 410
            self.identifier()
            self.state = 411
            self.numeral()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0):
                self.state = 412
                self.attribute()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 418
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_spec_constantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRW_Numeral(self):
            return self.getToken(SLComp18Parser.GRW_Numeral, 0)

        def GRW_Decimal(self):
            return self.getToken(SLComp18Parser.GRW_Decimal, 0)

        def GRW_String(self):
            return self.getToken(SLComp18Parser.GRW_String, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_meta_spec_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeta_spec_constant" ):
                listener.enterMeta_spec_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeta_spec_constant" ):
                listener.exitMeta_spec_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeta_spec_constant" ):
                return visitor.visitMeta_spec_constant(self)
            else:
                return visitor.visitChildren(self)




    def meta_spec_constant(self):

        localctx = SLComp18Parser.Meta_spec_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_meta_spec_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            _la = self._input.LA(1)
            if not(((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (SLComp18Parser.GRW_Decimal - 59)) | (1 << (SLComp18Parser.GRW_Numeral - 59)) | (1 << (SLComp18Parser.GRW_String - 59)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fun_symbol_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def spec_constant(self):
            return self.getTypedRuleContext(SLComp18Parser.Spec_constantContext,0)


        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SortContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SortContext,i)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.AttributeContext,i)


        def meta_spec_constant(self):
            return self.getTypedRuleContext(SLComp18Parser.Meta_spec_constantContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SLComp18Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_fun_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFun_symbol_decl" ):
                listener.enterFun_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFun_symbol_decl" ):
                listener.exitFun_symbol_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFun_symbol_decl" ):
                return visitor.visitFun_symbol_decl(self)
            else:
                return visitor.visitChildren(self)




    def fun_symbol_decl(self):

        localctx = SLComp18Parser.Fun_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fun_symbol_decl)
        self._la = 0 # Token type
        try:
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self.match(SLComp18Parser.ParOpen)
                self.state = 423
                self.spec_constant()
                self.state = 424
                self.sort()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0):
                    self.state = 425
                    self.attribute()
                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 431
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.match(SLComp18Parser.ParOpen)
                self.state = 434
                self.meta_spec_constant()
                self.state = 435
                self.sort()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0):
                    self.state = 436
                    self.attribute()
                    self.state = 441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 442
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 444
                self.match(SLComp18Parser.ParOpen)
                self.state = 445
                self.identifier()
                self.state = 447 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 446
                    self.sort()
                    self.state = 449 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol):
                        break

                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0):
                    self.state = 451
                    self.attribute()
                    self.state = 456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 457
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Par_fun_symbol_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fun_symbol_decl(self):
            return self.getTypedRuleContext(SLComp18Parser.Fun_symbol_declContext,0)


        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParOpen)
            else:
                return self.getToken(SLComp18Parser.ParOpen, i)

        def GRW_Par(self):
            return self.getToken(SLComp18Parser.GRW_Par, 0)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParClose)
            else:
                return self.getToken(SLComp18Parser.ParClose, i)

        def identifier(self):
            return self.getTypedRuleContext(SLComp18Parser.IdentifierContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SymbolContext,i)


        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SortContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SortContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_par_fun_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_fun_symbol_decl" ):
                listener.enterPar_fun_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_fun_symbol_decl" ):
                listener.exitPar_fun_symbol_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPar_fun_symbol_decl" ):
                return visitor.visitPar_fun_symbol_decl(self)
            else:
                return visitor.visitChildren(self)




    def par_fun_symbol_decl(self):

        localctx = SLComp18Parser.Par_fun_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_par_fun_symbol_decl)
        self._la = 0 # Token type
        try:
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.fun_symbol_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.match(SLComp18Parser.ParOpen)
                self.state = 463
                self.match(SLComp18Parser.GRW_Par)
                self.state = 464
                self.match(SLComp18Parser.ParOpen)
                self.state = 466 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 465
                    self.symbol()
                    self.state = 468 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol):
                        break

                self.state = 470
                self.match(SLComp18Parser.ParClose)
                self.state = 471
                self.match(SLComp18Parser.ParOpen)
                self.state = 472
                self.identifier()
                self.state = 474 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 473
                    self.sort()
                    self.state = 476 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol):
                        break

                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0):
                    self.state = 478
                    self.attribute()
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 484
                self.match(SLComp18Parser.ParClose)
                self.state = 485
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Theory_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_Sorts(self):
            return self.getToken(SLComp18Parser.PK_Sorts, 0)

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def sort_symbol_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Sort_symbol_declContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Sort_symbol_declContext,i)


        def PK_Funs(self):
            return self.getToken(SLComp18Parser.PK_Funs, 0)

        def par_fun_symbol_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Par_fun_symbol_declContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Par_fun_symbol_declContext,i)


        def PK_SortsDescription(self):
            return self.getToken(SLComp18Parser.PK_SortsDescription, 0)

        def string(self):
            return self.getTypedRuleContext(SLComp18Parser.StringContext,0)


        def PK_FunsDescription(self):
            return self.getToken(SLComp18Parser.PK_FunsDescription, 0)

        def PK_Definition(self):
            return self.getToken(SLComp18Parser.PK_Definition, 0)

        def PK_Values(self):
            return self.getToken(SLComp18Parser.PK_Values, 0)

        def PK_Notes(self):
            return self.getToken(SLComp18Parser.PK_Notes, 0)

        def attribute(self):
            return self.getTypedRuleContext(SLComp18Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_theory_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheory_attribute" ):
                listener.enterTheory_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheory_attribute" ):
                listener.exitTheory_attribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheory_attribute" ):
                return visitor.visitTheory_attribute(self)
            else:
                return visitor.visitChildren(self)




    def theory_attribute(self):

        localctx = SLComp18Parser.Theory_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_theory_attribute)
        self._la = 0 # Token type
        try:
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.match(SLComp18Parser.PK_Sorts)
                self.state = 490
                self.match(SLComp18Parser.ParOpen)
                self.state = 492 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 491
                    self.sort_symbol_decl()
                    self.state = 494 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 496
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.match(SLComp18Parser.PK_Funs)
                self.state = 499
                self.match(SLComp18Parser.ParOpen)
                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 500
                    self.par_fun_symbol_decl()
                    self.state = 503 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 505
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 507
                self.match(SLComp18Parser.PK_SortsDescription)
                self.state = 508
                self.string()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 509
                self.match(SLComp18Parser.PK_FunsDescription)
                self.state = 510
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 511
                self.match(SLComp18Parser.PK_Definition)
                self.state = 512
                self.string()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 513
                self.match(SLComp18Parser.PK_Values)
                self.state = 514
                self.string()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 515
                self.match(SLComp18Parser.PK_Notes)
                self.state = 516
                self.string()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 517
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Theory_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def PS_Theory(self):
            return self.getToken(SLComp18Parser.PS_Theory, 0)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def theory_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Theory_attributeContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Theory_attributeContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_theory_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheory_decl" ):
                listener.enterTheory_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheory_decl" ):
                listener.exitTheory_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheory_decl" ):
                return visitor.visitTheory_decl(self)
            else:
                return visitor.visitChildren(self)




    def theory_decl(self):

        localctx = SLComp18Parser.Theory_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_theory_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(SLComp18Parser.ParOpen)
            self.state = 521
            self.match(SLComp18Parser.PS_Theory)
            self.state = 522
            self.symbol()
            self.state = 524 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 523
                self.theory_attribute()
                self.state = 526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0)):
                    break

            self.state = 528
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logic_attribueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_Theories(self):
            return self.getToken(SLComp18Parser.PK_Theories, 0)

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SymbolContext,i)


        def PK_Language(self):
            return self.getToken(SLComp18Parser.PK_Language, 0)

        def string(self):
            return self.getTypedRuleContext(SLComp18Parser.StringContext,0)


        def PK_Extension(self):
            return self.getToken(SLComp18Parser.PK_Extension, 0)

        def PK_Values(self):
            return self.getToken(SLComp18Parser.PK_Values, 0)

        def PK_Notes(self):
            return self.getToken(SLComp18Parser.PK_Notes, 0)

        def attribute(self):
            return self.getTypedRuleContext(SLComp18Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_logic_attribue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic_attribue" ):
                listener.enterLogic_attribue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic_attribue" ):
                listener.exitLogic_attribue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic_attribue" ):
                return visitor.visitLogic_attribue(self)
            else:
                return visitor.visitChildren(self)




    def logic_attribue(self):

        localctx = SLComp18Parser.Logic_attribueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_logic_attribue)
        self._la = 0 # Token type
        try:
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.match(SLComp18Parser.PK_Theories)
                self.state = 531
                self.match(SLComp18Parser.ParOpen)
                self.state = 533 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 532
                    self.symbol()
                    self.state = 535 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol):
                        break

                self.state = 537
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 539
                self.match(SLComp18Parser.PK_Language)
                self.state = 540
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 541
                self.match(SLComp18Parser.PK_Extension)
                self.state = 542
                self.string()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 543
                self.match(SLComp18Parser.PK_Values)
                self.state = 544
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 545
                self.match(SLComp18Parser.PK_Notes)
                self.state = 546
                self.string()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 547
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def PS_Logic(self):
            return self.getToken(SLComp18Parser.PS_Logic, 0)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def logic_attribue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Logic_attribueContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Logic_attribueContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic" ):
                return visitor.visitLogic(self)
            else:
                return visitor.visitChildren(self)




    def logic(self):

        localctx = SLComp18Parser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_logic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(SLComp18Parser.ParOpen)
            self.state = 551
            self.match(SLComp18Parser.PS_Logic)
            self.state = 552
            self.symbol()
            self.state = 554 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 553
                self.logic_attribue()
                self.state = 556 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0)):
                    break

            self.state = 558
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sort_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SLComp18Parser.NumeralContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_sort_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_dec" ):
                listener.enterSort_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_dec" ):
                listener.exitSort_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_dec" ):
                return visitor.visitSort_dec(self)
            else:
                return visitor.visitChildren(self)




    def sort_dec(self):

        localctx = SLComp18Parser.Sort_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_sort_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(SLComp18Parser.ParOpen)
            self.state = 561
            self.symbol()
            self.state = 562
            self.numeral()
            self.state = 563
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selector_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def sort(self):
            return self.getTypedRuleContext(SLComp18Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_selector_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector_dec" ):
                listener.enterSelector_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector_dec" ):
                listener.exitSelector_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelector_dec" ):
                return visitor.visitSelector_dec(self)
            else:
                return visitor.visitChildren(self)




    def selector_dec(self):

        localctx = SLComp18Parser.Selector_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_selector_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(SLComp18Parser.ParOpen)
            self.state = 566
            self.symbol()
            self.state = 567
            self.sort()
            self.state = 568
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def selector_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Selector_decContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Selector_decContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_constructor_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_dec" ):
                listener.enterConstructor_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_dec" ):
                listener.exitConstructor_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_dec" ):
                return visitor.visitConstructor_dec(self)
            else:
                return visitor.visitChildren(self)




    def constructor_dec(self):

        localctx = SLComp18Parser.Constructor_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_constructor_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(SLComp18Parser.ParOpen)
            self.state = 571
            self.symbol()
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SLComp18Parser.ParOpen:
                self.state = 572
                self.selector_dec()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 578
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Datatype_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParOpen)
            else:
                return self.getToken(SLComp18Parser.ParOpen, i)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParClose)
            else:
                return self.getToken(SLComp18Parser.ParClose, i)

        def constructor_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Constructor_decContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Constructor_decContext,i)


        def GRW_Par(self):
            return self.getToken(SLComp18Parser.GRW_Par, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_datatype_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype_dec" ):
                listener.enterDatatype_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype_dec" ):
                listener.exitDatatype_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatatype_dec" ):
                return visitor.visitDatatype_dec(self)
            else:
                return visitor.visitChildren(self)




    def datatype_dec(self):

        localctx = SLComp18Parser.Datatype_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_datatype_dec)
        self._la = 0 # Token type
        try:
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 580
                self.match(SLComp18Parser.ParOpen)
                self.state = 582 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 581
                    self.constructor_dec()
                    self.state = 584 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 586
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.match(SLComp18Parser.ParOpen)
                self.state = 589
                self.match(SLComp18Parser.GRW_Par)
                self.state = 590
                self.match(SLComp18Parser.ParOpen)
                self.state = 592 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 591
                    self.symbol()
                    self.state = 594 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol):
                        break

                self.state = 596
                self.match(SLComp18Parser.ParClose)
                self.state = 597
                self.match(SLComp18Parser.ParOpen)
                self.state = 599 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 598
                    self.constructor_dec()
                    self.state = 601 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 603
                self.match(SLComp18Parser.ParClose)
                self.state = 604
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParOpen)
            else:
                return self.getToken(SLComp18Parser.ParOpen, i)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParClose)
            else:
                return self.getToken(SLComp18Parser.ParClose, i)

        def sort(self):
            return self.getTypedRuleContext(SLComp18Parser.SortContext,0)


        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Sorted_varContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_function_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_dec" ):
                listener.enterFunction_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_dec" ):
                listener.exitFunction_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_dec" ):
                return visitor.visitFunction_dec(self)
            else:
                return visitor.visitChildren(self)




    def function_dec(self):

        localctx = SLComp18Parser.Function_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_function_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(SLComp18Parser.ParOpen)
            self.state = 609
            self.symbol()
            self.state = 610
            self.match(SLComp18Parser.ParOpen)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SLComp18Parser.ParOpen:
                self.state = 611
                self.sorted_var()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 617
            self.match(SLComp18Parser.ParClose)
            self.state = 618
            self.sort()
            self.state = 619
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def sort(self):
            return self.getTypedRuleContext(SLComp18Parser.SortContext,0)


        def term(self):
            return self.getTypedRuleContext(SLComp18Parser.TermContext,0)


        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Sorted_varContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_function_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_def" ):
                listener.enterFunction_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_def" ):
                listener.exitFunction_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_def" ):
                return visitor.visitFunction_def(self)
            else:
                return visitor.visitChildren(self)




    def function_def(self):

        localctx = SLComp18Parser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_function_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.symbol()
            self.state = 622
            self.match(SLComp18Parser.ParOpen)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SLComp18Parser.ParOpen:
                self.state = 623
                self.sorted_var()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self.match(SLComp18Parser.ParClose)
            self.state = 630
            self.sort()
            self.state = 631
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prop_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def PS_Not(self):
            return self.getToken(SLComp18Parser.PS_Not, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_prop_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProp_literal" ):
                listener.enterProp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProp_literal" ):
                listener.exitProp_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProp_literal" ):
                return visitor.visitProp_literal(self)
            else:
                return visitor.visitChildren(self)




    def prop_literal(self):

        localctx = SLComp18Parser.Prop_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_prop_literal)
        try:
            self.state = 639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SLComp18Parser.QuotedSymbol, SLComp18Parser.PS_Not, SLComp18Parser.PS_Bool, SLComp18Parser.PS_ContinuedExecution, SLComp18Parser.PS_Error, SLComp18Parser.PS_False, SLComp18Parser.PS_ImmediateExit, SLComp18Parser.PS_Incomplete, SLComp18Parser.PS_Logic, SLComp18Parser.PS_Memout, SLComp18Parser.PS_Sat, SLComp18Parser.PS_Success, SLComp18Parser.PS_Theory, SLComp18Parser.PS_True, SLComp18Parser.PS_Unknown, SLComp18Parser.PS_Unsupported, SLComp18Parser.PS_Unsat, SLComp18Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.symbol()
                pass
            elif token in [SLComp18Parser.ParOpen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(SLComp18Parser.ParOpen)
                self.state = 635
                self.match(SLComp18Parser.PS_Not)
                self.state = 636
                self.symbol()
                self.state = 637
                self.match(SLComp18Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.CommandContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.CommandContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript" ):
                return visitor.visitScript(self)
            else:
                return visitor.visitChildren(self)




    def script(self):

        localctx = SLComp18Parser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SLComp18Parser.ParOpen:
                self.state = 641
                self.command()
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_assertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Assert(self):
            return self.getToken(SLComp18Parser.CMD_Assert, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_assert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_assert" ):
                listener.enterCmd_assert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_assert" ):
                listener.exitCmd_assert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_assert" ):
                return visitor.visitCmd_assert(self)
            else:
                return visitor.visitChildren(self)




    def cmd_assert(self):

        localctx = SLComp18Parser.Cmd_assertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_cmd_assert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(SLComp18Parser.CMD_Assert)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_checkSatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_CheckSat(self):
            return self.getToken(SLComp18Parser.CMD_CheckSat, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_checkSat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_checkSat" ):
                listener.enterCmd_checkSat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_checkSat" ):
                listener.exitCmd_checkSat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_checkSat" ):
                return visitor.visitCmd_checkSat(self)
            else:
                return visitor.visitChildren(self)




    def cmd_checkSat(self):

        localctx = SLComp18Parser.Cmd_checkSatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_cmd_checkSat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(SLComp18Parser.CMD_CheckSat)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_checkUnsatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_CheckUnsat(self):
            return self.getToken(SLComp18Parser.CMD_CheckUnsat, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_checkUnsat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_checkUnsat" ):
                listener.enterCmd_checkUnsat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_checkUnsat" ):
                listener.exitCmd_checkUnsat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_checkUnsat" ):
                return visitor.visitCmd_checkUnsat(self)
            else:
                return visitor.visitChildren(self)




    def cmd_checkUnsat(self):

        localctx = SLComp18Parser.Cmd_checkUnsatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_cmd_checkUnsat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(SLComp18Parser.CMD_CheckUnsat)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_checkSatAssumingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_CheckSatAssuming(self):
            return self.getToken(SLComp18Parser.CMD_CheckSatAssuming, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_checkSatAssuming

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_checkSatAssuming" ):
                listener.enterCmd_checkSatAssuming(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_checkSatAssuming" ):
                listener.exitCmd_checkSatAssuming(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_checkSatAssuming" ):
                return visitor.visitCmd_checkSatAssuming(self)
            else:
                return visitor.visitChildren(self)




    def cmd_checkSatAssuming(self):

        localctx = SLComp18Parser.Cmd_checkSatAssumingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_cmd_checkSatAssuming)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(SLComp18Parser.CMD_CheckSatAssuming)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_declareConstContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareConst(self):
            return self.getToken(SLComp18Parser.CMD_DeclareConst, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_declareConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareConst" ):
                listener.enterCmd_declareConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareConst" ):
                listener.exitCmd_declareConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_declareConst" ):
                return visitor.visitCmd_declareConst(self)
            else:
                return visitor.visitChildren(self)




    def cmd_declareConst(self):

        localctx = SLComp18Parser.Cmd_declareConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_cmd_declareConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(SLComp18Parser.CMD_DeclareConst)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_declareDatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareDatatype(self):
            return self.getToken(SLComp18Parser.CMD_DeclareDatatype, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_declareDatatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareDatatype" ):
                listener.enterCmd_declareDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareDatatype" ):
                listener.exitCmd_declareDatatype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_declareDatatype" ):
                return visitor.visitCmd_declareDatatype(self)
            else:
                return visitor.visitChildren(self)




    def cmd_declareDatatype(self):

        localctx = SLComp18Parser.Cmd_declareDatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_cmd_declareDatatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(SLComp18Parser.CMD_DeclareDatatype)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_declareDatatypesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareDatatypes(self):
            return self.getToken(SLComp18Parser.CMD_DeclareDatatypes, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_declareDatatypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareDatatypes" ):
                listener.enterCmd_declareDatatypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareDatatypes" ):
                listener.exitCmd_declareDatatypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_declareDatatypes" ):
                return visitor.visitCmd_declareDatatypes(self)
            else:
                return visitor.visitChildren(self)




    def cmd_declareDatatypes(self):

        localctx = SLComp18Parser.Cmd_declareDatatypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_cmd_declareDatatypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(SLComp18Parser.CMD_DeclareDatatypes)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_declareFunContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareFun(self):
            return self.getToken(SLComp18Parser.CMD_DeclareFun, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_declareFun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareFun" ):
                listener.enterCmd_declareFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareFun" ):
                listener.exitCmd_declareFun(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_declareFun" ):
                return visitor.visitCmd_declareFun(self)
            else:
                return visitor.visitChildren(self)




    def cmd_declareFun(self):

        localctx = SLComp18Parser.Cmd_declareFunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_cmd_declareFun)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(SLComp18Parser.CMD_DeclareFun)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_declareHeapContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareHeap(self):
            return self.getToken(SLComp18Parser.CMD_DeclareHeap, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_declareHeap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareHeap" ):
                listener.enterCmd_declareHeap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareHeap" ):
                listener.exitCmd_declareHeap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_declareHeap" ):
                return visitor.visitCmd_declareHeap(self)
            else:
                return visitor.visitChildren(self)




    def cmd_declareHeap(self):

        localctx = SLComp18Parser.Cmd_declareHeapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_cmd_declareHeap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(SLComp18Parser.CMD_DeclareHeap)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_declareSortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareSort(self):
            return self.getToken(SLComp18Parser.CMD_DeclareSort, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_declareSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareSort" ):
                listener.enterCmd_declareSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareSort" ):
                listener.exitCmd_declareSort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_declareSort" ):
                return visitor.visitCmd_declareSort(self)
            else:
                return visitor.visitChildren(self)




    def cmd_declareSort(self):

        localctx = SLComp18Parser.Cmd_declareSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_cmd_declareSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(SLComp18Parser.CMD_DeclareSort)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_defineFunContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFun(self):
            return self.getToken(SLComp18Parser.CMD_DefineFun, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_defineFun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFun" ):
                listener.enterCmd_defineFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFun" ):
                listener.exitCmd_defineFun(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_defineFun" ):
                return visitor.visitCmd_defineFun(self)
            else:
                return visitor.visitChildren(self)




    def cmd_defineFun(self):

        localctx = SLComp18Parser.Cmd_defineFunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_cmd_defineFun)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(SLComp18Parser.CMD_DefineFun)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_defineFunRecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFunRec(self):
            return self.getToken(SLComp18Parser.CMD_DefineFunRec, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_defineFunRec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFunRec" ):
                listener.enterCmd_defineFunRec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFunRec" ):
                listener.exitCmd_defineFunRec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_defineFunRec" ):
                return visitor.visitCmd_defineFunRec(self)
            else:
                return visitor.visitChildren(self)




    def cmd_defineFunRec(self):

        localctx = SLComp18Parser.Cmd_defineFunRecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_cmd_defineFunRec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(SLComp18Parser.CMD_DefineFunRec)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_defineFunsRecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFunsRec(self):
            return self.getToken(SLComp18Parser.CMD_DefineFunsRec, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_defineFunsRec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFunsRec" ):
                listener.enterCmd_defineFunsRec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFunsRec" ):
                listener.exitCmd_defineFunsRec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_defineFunsRec" ):
                return visitor.visitCmd_defineFunsRec(self)
            else:
                return visitor.visitChildren(self)




    def cmd_defineFunsRec(self):

        localctx = SLComp18Parser.Cmd_defineFunsRecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_cmd_defineFunsRec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(SLComp18Parser.CMD_DefineFunsRec)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_defineSortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineSort(self):
            return self.getToken(SLComp18Parser.CMD_DefineSort, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_defineSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineSort" ):
                listener.enterCmd_defineSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineSort" ):
                listener.exitCmd_defineSort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_defineSort" ):
                return visitor.visitCmd_defineSort(self)
            else:
                return visitor.visitChildren(self)




    def cmd_defineSort(self):

        localctx = SLComp18Parser.Cmd_defineSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cmd_defineSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(SLComp18Parser.CMD_DefineSort)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_echoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Echo(self):
            return self.getToken(SLComp18Parser.CMD_Echo, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_echo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_echo" ):
                listener.enterCmd_echo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_echo" ):
                listener.exitCmd_echo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_echo" ):
                return visitor.visitCmd_echo(self)
            else:
                return visitor.visitChildren(self)




    def cmd_echo(self):

        localctx = SLComp18Parser.Cmd_echoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cmd_echo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(SLComp18Parser.CMD_Echo)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_exitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Exit(self):
            return self.getToken(SLComp18Parser.CMD_Exit, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_exit" ):
                listener.enterCmd_exit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_exit" ):
                listener.exitCmd_exit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_exit" ):
                return visitor.visitCmd_exit(self)
            else:
                return visitor.visitChildren(self)




    def cmd_exit(self):

        localctx = SLComp18Parser.Cmd_exitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cmd_exit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(SLComp18Parser.CMD_Exit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getAssertionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetAssertions(self):
            return self.getToken(SLComp18Parser.CMD_GetAssertions, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getAssertions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getAssertions" ):
                listener.enterCmd_getAssertions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getAssertions" ):
                listener.exitCmd_getAssertions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getAssertions" ):
                return visitor.visitCmd_getAssertions(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getAssertions(self):

        localctx = SLComp18Parser.Cmd_getAssertionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_cmd_getAssertions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(SLComp18Parser.CMD_GetAssertions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetAssignment(self):
            return self.getToken(SLComp18Parser.CMD_GetAssignment, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getAssignment" ):
                listener.enterCmd_getAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getAssignment" ):
                listener.exitCmd_getAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getAssignment" ):
                return visitor.visitCmd_getAssignment(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getAssignment(self):

        localctx = SLComp18Parser.Cmd_getAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_cmd_getAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(SLComp18Parser.CMD_GetAssignment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getInfoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetInfo(self):
            return self.getToken(SLComp18Parser.CMD_GetInfo, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getInfo" ):
                listener.enterCmd_getInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getInfo" ):
                listener.exitCmd_getInfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getInfo" ):
                return visitor.visitCmd_getInfo(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getInfo(self):

        localctx = SLComp18Parser.Cmd_getInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_cmd_getInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(SLComp18Parser.CMD_GetInfo)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getModelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetModel(self):
            return self.getToken(SLComp18Parser.CMD_GetModel, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getModel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getModel" ):
                listener.enterCmd_getModel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getModel" ):
                listener.exitCmd_getModel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getModel" ):
                return visitor.visitCmd_getModel(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getModel(self):

        localctx = SLComp18Parser.Cmd_getModelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_cmd_getModel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(SLComp18Parser.CMD_GetModel)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetOption(self):
            return self.getToken(SLComp18Parser.CMD_GetOption, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getOption" ):
                listener.enterCmd_getOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getOption" ):
                listener.exitCmd_getOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getOption" ):
                return visitor.visitCmd_getOption(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getOption(self):

        localctx = SLComp18Parser.Cmd_getOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_cmd_getOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(SLComp18Parser.CMD_GetOption)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getProofContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetProof(self):
            return self.getToken(SLComp18Parser.CMD_GetProof, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getProof

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getProof" ):
                listener.enterCmd_getProof(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getProof" ):
                listener.exitCmd_getProof(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getProof" ):
                return visitor.visitCmd_getProof(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getProof(self):

        localctx = SLComp18Parser.Cmd_getProofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_cmd_getProof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(SLComp18Parser.CMD_GetProof)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getUnsatAssumptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetUnsatAssumptions(self):
            return self.getToken(SLComp18Parser.CMD_GetUnsatAssumptions, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getUnsatAssumptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getUnsatAssumptions" ):
                listener.enterCmd_getUnsatAssumptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getUnsatAssumptions" ):
                listener.exitCmd_getUnsatAssumptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getUnsatAssumptions" ):
                return visitor.visitCmd_getUnsatAssumptions(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getUnsatAssumptions(self):

        localctx = SLComp18Parser.Cmd_getUnsatAssumptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_cmd_getUnsatAssumptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(SLComp18Parser.CMD_GetUnsatAssumptions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getUnsatCoreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetUnsatCore(self):
            return self.getToken(SLComp18Parser.CMD_GetUnsatCore, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getUnsatCore

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getUnsatCore" ):
                listener.enterCmd_getUnsatCore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getUnsatCore" ):
                listener.exitCmd_getUnsatCore(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getUnsatCore" ):
                return visitor.visitCmd_getUnsatCore(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getUnsatCore(self):

        localctx = SLComp18Parser.Cmd_getUnsatCoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_cmd_getUnsatCore)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(SLComp18Parser.CMD_GetUnsatCore)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_getValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetValue(self):
            return self.getToken(SLComp18Parser.CMD_GetValue, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_getValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getValue" ):
                listener.enterCmd_getValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getValue" ):
                listener.exitCmd_getValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_getValue" ):
                return visitor.visitCmd_getValue(self)
            else:
                return visitor.visitChildren(self)




    def cmd_getValue(self):

        localctx = SLComp18Parser.Cmd_getValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_cmd_getValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(SLComp18Parser.CMD_GetValue)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_popContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Pop(self):
            return self.getToken(SLComp18Parser.CMD_Pop, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_pop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_pop" ):
                listener.enterCmd_pop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_pop" ):
                listener.exitCmd_pop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_pop" ):
                return visitor.visitCmd_pop(self)
            else:
                return visitor.visitChildren(self)




    def cmd_pop(self):

        localctx = SLComp18Parser.Cmd_popContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_cmd_pop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(SLComp18Parser.CMD_Pop)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_pushContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Push(self):
            return self.getToken(SLComp18Parser.CMD_Push, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_push

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_push" ):
                listener.enterCmd_push(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_push" ):
                listener.exitCmd_push(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_push" ):
                return visitor.visitCmd_push(self)
            else:
                return visitor.visitChildren(self)




    def cmd_push(self):

        localctx = SLComp18Parser.Cmd_pushContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_cmd_push)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(SLComp18Parser.CMD_Push)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_resetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Reset(self):
            return self.getToken(SLComp18Parser.CMD_Reset, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_reset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_reset" ):
                listener.enterCmd_reset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_reset" ):
                listener.exitCmd_reset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_reset" ):
                return visitor.visitCmd_reset(self)
            else:
                return visitor.visitChildren(self)




    def cmd_reset(self):

        localctx = SLComp18Parser.Cmd_resetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_cmd_reset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(SLComp18Parser.CMD_Reset)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_resetAssertionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_ResetAssertions(self):
            return self.getToken(SLComp18Parser.CMD_ResetAssertions, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_resetAssertions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_resetAssertions" ):
                listener.enterCmd_resetAssertions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_resetAssertions" ):
                listener.exitCmd_resetAssertions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_resetAssertions" ):
                return visitor.visitCmd_resetAssertions(self)
            else:
                return visitor.visitChildren(self)




    def cmd_resetAssertions(self):

        localctx = SLComp18Parser.Cmd_resetAssertionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_cmd_resetAssertions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(SLComp18Parser.CMD_ResetAssertions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_setInfoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetInfo(self):
            return self.getToken(SLComp18Parser.CMD_SetInfo, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_setInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setInfo" ):
                listener.enterCmd_setInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setInfo" ):
                listener.exitCmd_setInfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_setInfo" ):
                return visitor.visitCmd_setInfo(self)
            else:
                return visitor.visitChildren(self)




    def cmd_setInfo(self):

        localctx = SLComp18Parser.Cmd_setInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_cmd_setInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(SLComp18Parser.CMD_SetInfo)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_setLogicContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetLogic(self):
            return self.getToken(SLComp18Parser.CMD_SetLogic, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_setLogic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setLogic" ):
                listener.enterCmd_setLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setLogic" ):
                listener.exitCmd_setLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_setLogic" ):
                return visitor.visitCmd_setLogic(self)
            else:
                return visitor.visitChildren(self)




    def cmd_setLogic(self):

        localctx = SLComp18Parser.Cmd_setLogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_cmd_setLogic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(SLComp18Parser.CMD_SetLogic)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmd_setOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetOption(self):
            return self.getToken(SLComp18Parser.CMD_SetOption, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_cmd_setOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setOption" ):
                listener.enterCmd_setOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setOption" ):
                listener.exitCmd_setOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmd_setOption" ):
                return visitor.visitCmd_setOption(self)
            else:
                return visitor.visitChildren(self)




    def cmd_setOption(self):

        localctx = SLComp18Parser.Cmd_setOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_cmd_setOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(SLComp18Parser.CMD_SetOption)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Heap_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SortContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SortContext,i)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_heap_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeap_dec" ):
                listener.enterHeap_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeap_dec" ):
                listener.exitHeap_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeap_dec" ):
                return visitor.visitHeap_dec(self)
            else:
                return visitor.visitChildren(self)




    def heap_dec(self):

        localctx = SLComp18Parser.Heap_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_heap_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(SLComp18Parser.ParOpen)
            self.state = 712
            self.sort()
            self.state = 713
            self.sort()
            self.state = 714
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParOpen)
            else:
                return self.getToken(SLComp18Parser.ParOpen, i)

        def cmd_assert(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_assertContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.TermContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.TermContext,i)


        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParClose)
            else:
                return self.getToken(SLComp18Parser.ParClose, i)

        def cmd_checkSat(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_checkSatContext,0)


        def cmd_checkSatAssuming(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_checkSatAssumingContext,0)


        def cmd_checkUnsat(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_checkUnsatContext,0)


        def cmd_declareConst(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_declareConstContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SymbolContext,i)


        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SortContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SortContext,i)


        def cmd_declareDatatype(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_declareDatatypeContext,0)


        def datatype_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Datatype_decContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Datatype_decContext,i)


        def cmd_declareDatatypes(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_declareDatatypesContext,0)


        def sort_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Sort_decContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Sort_decContext,i)


        def cmd_declareFun(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_declareFunContext,0)


        def cmd_declareHeap(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_declareHeapContext,0)


        def heap_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Heap_decContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Heap_decContext,i)


        def cmd_declareSort(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_declareSortContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SLComp18Parser.NumeralContext,0)


        def cmd_defineFun(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_defineFunContext,0)


        def function_def(self):
            return self.getTypedRuleContext(SLComp18Parser.Function_defContext,0)


        def cmd_defineFunRec(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_defineFunRecContext,0)


        def cmd_defineFunsRec(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_defineFunsRecContext,0)


        def function_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Function_decContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Function_decContext,i)


        def cmd_defineSort(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_defineSortContext,0)


        def cmd_echo(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_echoContext,0)


        def string(self):
            return self.getTypedRuleContext(SLComp18Parser.StringContext,0)


        def cmd_exit(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_exitContext,0)


        def cmd_getAssertions(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getAssertionsContext,0)


        def cmd_getAssignment(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getAssignmentContext,0)


        def cmd_getInfo(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getInfoContext,0)


        def info_flag(self):
            return self.getTypedRuleContext(SLComp18Parser.Info_flagContext,0)


        def cmd_getModel(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getModelContext,0)


        def cmd_getOption(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getOptionContext,0)


        def keyword(self):
            return self.getTypedRuleContext(SLComp18Parser.KeywordContext,0)


        def cmd_getProof(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getProofContext,0)


        def cmd_getUnsatAssumptions(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getUnsatAssumptionsContext,0)


        def cmd_getUnsatCore(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getUnsatCoreContext,0)


        def cmd_getValue(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_getValueContext,0)


        def cmd_pop(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_popContext,0)


        def cmd_push(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_pushContext,0)


        def cmd_reset(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_resetContext,0)


        def cmd_resetAssertions(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_resetAssertionsContext,0)


        def cmd_setInfo(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_setInfoContext,0)


        def attribute(self):
            return self.getTypedRuleContext(SLComp18Parser.AttributeContext,0)


        def cmd_setLogic(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_setLogicContext,0)


        def cmd_setOption(self):
            return self.getTypedRuleContext(SLComp18Parser.Cmd_setOptionContext,0)


        def option(self):
            return self.getTypedRuleContext(SLComp18Parser.OptionContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommand" ):
                return visitor.visitCommand(self)
            else:
                return visitor.visitChildren(self)




    def command(self):

        localctx = SLComp18Parser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_command)
        self._la = 0 # Token type
        try:
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.match(SLComp18Parser.ParOpen)
                self.state = 717
                self.cmd_assert()
                self.state = 718
                self.term()
                self.state = 719
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.match(SLComp18Parser.ParOpen)
                self.state = 722
                self.cmd_checkSat()
                self.state = 723
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 725
                self.match(SLComp18Parser.ParOpen)
                self.state = 726
                self.cmd_checkSatAssuming()
                self.state = 727
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 729
                self.match(SLComp18Parser.ParOpen)
                self.state = 730
                self.cmd_checkUnsat()
                self.state = 731
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 733
                self.match(SLComp18Parser.ParOpen)
                self.state = 734
                self.cmd_declareConst()
                self.state = 735
                self.symbol()
                self.state = 736
                self.sort()
                self.state = 737
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 739
                self.match(SLComp18Parser.ParOpen)
                self.state = 740
                self.cmd_declareDatatype()
                self.state = 741
                self.symbol()
                self.state = 742
                self.datatype_dec()
                self.state = 743
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 745
                self.match(SLComp18Parser.ParOpen)
                self.state = 746
                self.cmd_declareDatatypes()
                self.state = 747
                self.match(SLComp18Parser.ParOpen)
                self.state = 749 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 748
                    self.sort_dec()
                    self.state = 751 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 753
                self.match(SLComp18Parser.ParClose)
                self.state = 754
                self.match(SLComp18Parser.ParOpen)
                self.state = 756 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 755
                    self.datatype_dec()
                    self.state = 758 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 760
                self.match(SLComp18Parser.ParClose)
                self.state = 761
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 763
                self.match(SLComp18Parser.ParOpen)
                self.state = 764
                self.cmd_declareFun()
                self.state = 765
                self.symbol()
                self.state = 766
                self.match(SLComp18Parser.ParOpen)
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol:
                    self.state = 767
                    self.sort()
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 773
                self.match(SLComp18Parser.ParClose)
                self.state = 774
                self.sort()
                self.state = 775
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 777
                self.match(SLComp18Parser.ParOpen)
                self.state = 778
                self.cmd_declareHeap()
                self.state = 780 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 779
                    self.heap_dec()
                    self.state = 782 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 784
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 786
                self.match(SLComp18Parser.ParOpen)
                self.state = 787
                self.cmd_declareSort()
                self.state = 788
                self.symbol()
                self.state = 789
                self.numeral()
                self.state = 790
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 792
                self.match(SLComp18Parser.ParOpen)
                self.state = 793
                self.cmd_defineFun()
                self.state = 794
                self.function_def()
                self.state = 795
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 797
                self.match(SLComp18Parser.ParOpen)
                self.state = 798
                self.cmd_defineFunRec()
                self.state = 799
                self.function_def()
                self.state = 800
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 802
                self.match(SLComp18Parser.ParOpen)
                self.state = 803
                self.cmd_defineFunsRec()
                self.state = 804
                self.match(SLComp18Parser.ParOpen)
                self.state = 806 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 805
                    self.function_dec()
                    self.state = 808 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 810
                self.match(SLComp18Parser.ParClose)
                self.state = 811
                self.match(SLComp18Parser.ParOpen)
                self.state = 813 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 812
                    self.term()
                    self.state = 815 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.String) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SLComp18Parser.Numeral - 68)) | (1 << (SLComp18Parser.Binary - 68)) | (1 << (SLComp18Parser.HexDecimal - 68)) | (1 << (SLComp18Parser.Decimal - 68)) | (1 << (SLComp18Parser.UndefinedSymbol - 68)))) != 0)):
                        break

                self.state = 817
                self.match(SLComp18Parser.ParClose)
                self.state = 818
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 820
                self.match(SLComp18Parser.ParOpen)
                self.state = 821
                self.cmd_defineSort()
                self.state = 822
                self.symbol()
                self.state = 823
                self.match(SLComp18Parser.ParOpen)
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol:
                    self.state = 824
                    self.symbol()
                    self.state = 829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 830
                self.match(SLComp18Parser.ParClose)
                self.state = 831
                self.sort()
                self.state = 832
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 834
                self.match(SLComp18Parser.ParOpen)
                self.state = 835
                self.cmd_echo()
                self.state = 836
                self.string()
                self.state = 837
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 839
                self.match(SLComp18Parser.ParOpen)
                self.state = 840
                self.cmd_exit()
                self.state = 841
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 843
                self.match(SLComp18Parser.ParOpen)
                self.state = 844
                self.cmd_getAssertions()
                self.state = 845
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 847
                self.match(SLComp18Parser.ParOpen)
                self.state = 848
                self.cmd_getAssignment()
                self.state = 849
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 851
                self.match(SLComp18Parser.ParOpen)
                self.state = 852
                self.cmd_getInfo()
                self.state = 853
                self.info_flag()
                self.state = 854
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 856
                self.match(SLComp18Parser.ParOpen)
                self.state = 857
                self.cmd_getModel()
                self.state = 858
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 860
                self.match(SLComp18Parser.ParOpen)
                self.state = 861
                self.cmd_getOption()
                self.state = 862
                self.keyword()
                self.state = 863
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 865
                self.match(SLComp18Parser.ParOpen)
                self.state = 866
                self.cmd_getProof()
                self.state = 867
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 869
                self.match(SLComp18Parser.ParOpen)
                self.state = 870
                self.cmd_getUnsatAssumptions()
                self.state = 871
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 873
                self.match(SLComp18Parser.ParOpen)
                self.state = 874
                self.cmd_getUnsatCore()
                self.state = 875
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 877
                self.match(SLComp18Parser.ParOpen)
                self.state = 878
                self.cmd_getValue()
                self.state = 879
                self.match(SLComp18Parser.ParOpen)
                self.state = 881 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 880
                    self.term()
                    self.state = 883 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.String) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SLComp18Parser.Numeral - 68)) | (1 << (SLComp18Parser.Binary - 68)) | (1 << (SLComp18Parser.HexDecimal - 68)) | (1 << (SLComp18Parser.Decimal - 68)) | (1 << (SLComp18Parser.UndefinedSymbol - 68)))) != 0)):
                        break

                self.state = 885
                self.match(SLComp18Parser.ParClose)
                self.state = 886
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 888
                self.match(SLComp18Parser.ParOpen)
                self.state = 889
                self.cmd_pop()
                self.state = 890
                self.numeral()
                self.state = 891
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 893
                self.match(SLComp18Parser.ParOpen)
                self.state = 894
                self.cmd_push()
                self.state = 895
                self.numeral()
                self.state = 896
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 898
                self.match(SLComp18Parser.ParOpen)
                self.state = 899
                self.cmd_reset()
                self.state = 900
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 902
                self.match(SLComp18Parser.ParOpen)
                self.state = 903
                self.cmd_resetAssertions()
                self.state = 904
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 906
                self.match(SLComp18Parser.ParOpen)
                self.state = 907
                self.cmd_setInfo()
                self.state = 908
                self.attribute()
                self.state = 909
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 911
                self.match(SLComp18Parser.ParOpen)
                self.state = 912
                self.cmd_setLogic()
                self.state = 913
                self.symbol()
                self.state = 914
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 916
                self.match(SLComp18Parser.ParOpen)
                self.state = 917
                self.cmd_setOption()
                self.state = 918
                self.option()
                self.state = 919
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class B_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_True(self):
            return self.getToken(SLComp18Parser.PS_True, 0)

        def PS_False(self):
            return self.getToken(SLComp18Parser.PS_False, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_b_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterB_value" ):
                listener.enterB_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitB_value" ):
                listener.exitB_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitB_value" ):
                return visitor.visitB_value(self)
            else:
                return visitor.visitChildren(self)




    def b_value(self):

        localctx = SLComp18Parser.B_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_b_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            _la = self._input.LA(1)
            if not(_la==SLComp18Parser.PS_False or _la==SLComp18Parser.PS_True):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_DiagnosticOutputChannel(self):
            return self.getToken(SLComp18Parser.PK_DiagnosticOutputChannel, 0)

        def string(self):
            return self.getTypedRuleContext(SLComp18Parser.StringContext,0)


        def PK_GlobalDeclarations(self):
            return self.getToken(SLComp18Parser.PK_GlobalDeclarations, 0)

        def b_value(self):
            return self.getTypedRuleContext(SLComp18Parser.B_valueContext,0)


        def PK_InteractiveMode(self):
            return self.getToken(SLComp18Parser.PK_InteractiveMode, 0)

        def PK_PrintSuccess(self):
            return self.getToken(SLComp18Parser.PK_PrintSuccess, 0)

        def PK_ProduceAssertions(self):
            return self.getToken(SLComp18Parser.PK_ProduceAssertions, 0)

        def PK_ProduceAssignments(self):
            return self.getToken(SLComp18Parser.PK_ProduceAssignments, 0)

        def PK_ProduceModels(self):
            return self.getToken(SLComp18Parser.PK_ProduceModels, 0)

        def PK_ProduceProofs(self):
            return self.getToken(SLComp18Parser.PK_ProduceProofs, 0)

        def PK_ProduceUnsatAssumptions(self):
            return self.getToken(SLComp18Parser.PK_ProduceUnsatAssumptions, 0)

        def PK_ProduceUnsatCores(self):
            return self.getToken(SLComp18Parser.PK_ProduceUnsatCores, 0)

        def PK_RandomSeed(self):
            return self.getToken(SLComp18Parser.PK_RandomSeed, 0)

        def numeral(self):
            return self.getTypedRuleContext(SLComp18Parser.NumeralContext,0)


        def PK_RegularOutputChannel(self):
            return self.getToken(SLComp18Parser.PK_RegularOutputChannel, 0)

        def PK_ReproducibleResourceLimit(self):
            return self.getToken(SLComp18Parser.PK_ReproducibleResourceLimit, 0)

        def PK_Verbosity(self):
            return self.getToken(SLComp18Parser.PK_Verbosity, 0)

        def attribute(self):
            return self.getTypedRuleContext(SLComp18Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption" ):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)




    def option(self):

        localctx = SLComp18Parser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_option)
        try:
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 925
                self.match(SLComp18Parser.PK_DiagnosticOutputChannel)
                self.state = 926
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.match(SLComp18Parser.PK_GlobalDeclarations)
                self.state = 928
                self.b_value()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 929
                self.match(SLComp18Parser.PK_InteractiveMode)
                self.state = 930
                self.b_value()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 931
                self.match(SLComp18Parser.PK_PrintSuccess)
                self.state = 932
                self.b_value()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 933
                self.match(SLComp18Parser.PK_ProduceAssertions)
                self.state = 934
                self.b_value()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 935
                self.match(SLComp18Parser.PK_ProduceAssignments)
                self.state = 936
                self.b_value()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 937
                self.match(SLComp18Parser.PK_ProduceModels)
                self.state = 938
                self.b_value()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 939
                self.match(SLComp18Parser.PK_ProduceProofs)
                self.state = 940
                self.b_value()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 941
                self.match(SLComp18Parser.PK_ProduceUnsatAssumptions)
                self.state = 942
                self.b_value()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 943
                self.match(SLComp18Parser.PK_ProduceUnsatCores)
                self.state = 944
                self.b_value()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 945
                self.match(SLComp18Parser.PK_RandomSeed)
                self.state = 946
                self.numeral()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 947
                self.match(SLComp18Parser.PK_RegularOutputChannel)
                self.state = 948
                self.string()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 949
                self.match(SLComp18Parser.PK_ReproducibleResourceLimit)
                self.state = 950
                self.numeral()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 951
                self.match(SLComp18Parser.PK_Verbosity)
                self.state = 952
                self.numeral()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 953
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Info_flagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AllStatistics(self):
            return self.getToken(SLComp18Parser.PK_AllStatistics, 0)

        def PK_AssertionStackLevels(self):
            return self.getToken(SLComp18Parser.PK_AssertionStackLevels, 0)

        def PK_Authors(self):
            return self.getToken(SLComp18Parser.PK_Authors, 0)

        def PK_ErrorBehaviour(self):
            return self.getToken(SLComp18Parser.PK_ErrorBehaviour, 0)

        def PK_Name(self):
            return self.getToken(SLComp18Parser.PK_Name, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SLComp18Parser.PK_ReasonUnknown, 0)

        def PK_Version(self):
            return self.getToken(SLComp18Parser.PK_Version, 0)

        def keyword(self):
            return self.getTypedRuleContext(SLComp18Parser.KeywordContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_info_flag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfo_flag" ):
                listener.enterInfo_flag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfo_flag" ):
                listener.exitInfo_flag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfo_flag" ):
                return visitor.visitInfo_flag(self)
            else:
                return visitor.visitChildren(self)




    def info_flag(self):

        localctx = SLComp18Parser.Info_flagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_info_flag)
        try:
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.match(SLComp18Parser.PK_AllStatistics)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 957
                self.match(SLComp18Parser.PK_AssertionStackLevels)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 958
                self.match(SLComp18Parser.PK_Authors)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 959
                self.match(SLComp18Parser.PK_ErrorBehaviour)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 960
                self.match(SLComp18Parser.PK_Name)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 961
                self.match(SLComp18Parser.PK_ReasonUnknown)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 962
                self.match(SLComp18Parser.PK_Version)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 963
                self.keyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_behaviourContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_ImmediateExit(self):
            return self.getToken(SLComp18Parser.PS_ImmediateExit, 0)

        def PS_ContinuedExecution(self):
            return self.getToken(SLComp18Parser.PS_ContinuedExecution, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_error_behaviour

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_behaviour" ):
                listener.enterError_behaviour(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_behaviour" ):
                listener.exitError_behaviour(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_behaviour" ):
                return visitor.visitError_behaviour(self)
            else:
                return visitor.visitChildren(self)




    def error_behaviour(self):

        localctx = SLComp18Parser.Error_behaviourContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_error_behaviour)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            _la = self._input.LA(1)
            if not(_la==SLComp18Parser.PS_ContinuedExecution or _la==SLComp18Parser.PS_ImmediateExit):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reason_unknownContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Memout(self):
            return self.getToken(SLComp18Parser.PS_Memout, 0)

        def PS_Incomplete(self):
            return self.getToken(SLComp18Parser.PS_Incomplete, 0)

        def s_expr(self):
            return self.getTypedRuleContext(SLComp18Parser.S_exprContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_reason_unknown

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReason_unknown" ):
                listener.enterReason_unknown(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReason_unknown" ):
                listener.exitReason_unknown(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReason_unknown" ):
                return visitor.visitReason_unknown(self)
            else:
                return visitor.visitChildren(self)




    def reason_unknown(self):

        localctx = SLComp18Parser.Reason_unknownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_reason_unknown)
        try:
            self.state = 971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.match(SLComp18Parser.PS_Memout)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.match(SLComp18Parser.PS_Incomplete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.s_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParOpen)
            else:
                return self.getToken(SLComp18Parser.ParOpen, i)

        def CMD_DefineFun(self):
            return self.getToken(SLComp18Parser.CMD_DefineFun, 0)

        def function_def(self):
            return self.getTypedRuleContext(SLComp18Parser.Function_defContext,0)


        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SLComp18Parser.ParClose)
            else:
                return self.getToken(SLComp18Parser.ParClose, i)

        def CMD_DefineFunRec(self):
            return self.getToken(SLComp18Parser.CMD_DefineFunRec, 0)

        def CMD_DefineFunsRec(self):
            return self.getToken(SLComp18Parser.CMD_DefineFunsRec, 0)

        def function_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Function_decContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Function_decContext,i)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.TermContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.TermContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_model_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_response" ):
                listener.enterModel_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_response" ):
                listener.exitModel_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_response" ):
                return visitor.visitModel_response(self)
            else:
                return visitor.visitChildren(self)




    def model_response(self):

        localctx = SLComp18Parser.Model_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_model_response)
        self._la = 0 # Token type
        try:
            self.state = 1001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 973
                self.match(SLComp18Parser.ParOpen)
                self.state = 974
                self.match(SLComp18Parser.CMD_DefineFun)
                self.state = 975
                self.function_def()
                self.state = 976
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.match(SLComp18Parser.ParOpen)
                self.state = 979
                self.match(SLComp18Parser.CMD_DefineFunRec)
                self.state = 980
                self.function_def()
                self.state = 981
                self.match(SLComp18Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.match(SLComp18Parser.ParOpen)
                self.state = 984
                self.match(SLComp18Parser.CMD_DefineFunsRec)
                self.state = 985
                self.match(SLComp18Parser.ParOpen)
                self.state = 987 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 986
                    self.function_dec()
                    self.state = 989 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SLComp18Parser.ParOpen):
                        break

                self.state = 991
                self.match(SLComp18Parser.ParClose)
                self.state = 992
                self.match(SLComp18Parser.ParOpen)
                self.state = 994 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 993
                    self.term()
                    self.state = 996 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.String) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SLComp18Parser.Numeral - 68)) | (1 << (SLComp18Parser.Binary - 68)) | (1 << (SLComp18Parser.HexDecimal - 68)) | (1 << (SLComp18Parser.Decimal - 68)) | (1 << (SLComp18Parser.UndefinedSymbol - 68)))) != 0)):
                        break

                self.state = 998
                self.match(SLComp18Parser.ParClose)
                self.state = 999
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Info_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AssertionStackLevels(self):
            return self.getToken(SLComp18Parser.PK_AssertionStackLevels, 0)

        def numeral(self):
            return self.getTypedRuleContext(SLComp18Parser.NumeralContext,0)


        def PK_Authors(self):
            return self.getToken(SLComp18Parser.PK_Authors, 0)

        def string(self):
            return self.getTypedRuleContext(SLComp18Parser.StringContext,0)


        def PK_ErrorBehaviour(self):
            return self.getToken(SLComp18Parser.PK_ErrorBehaviour, 0)

        def error_behaviour(self):
            return self.getTypedRuleContext(SLComp18Parser.Error_behaviourContext,0)


        def PK_Name(self):
            return self.getToken(SLComp18Parser.PK_Name, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SLComp18Parser.PK_ReasonUnknown, 0)

        def reason_unknown(self):
            return self.getTypedRuleContext(SLComp18Parser.Reason_unknownContext,0)


        def PK_Version(self):
            return self.getToken(SLComp18Parser.PK_Version, 0)

        def attribute(self):
            return self.getTypedRuleContext(SLComp18Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_info_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfo_response" ):
                listener.enterInfo_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfo_response" ):
                listener.exitInfo_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfo_response" ):
                return visitor.visitInfo_response(self)
            else:
                return visitor.visitChildren(self)




    def info_response(self):

        localctx = SLComp18Parser.Info_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_info_response)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.match(SLComp18Parser.PK_AssertionStackLevels)
                self.state = 1004
                self.numeral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.match(SLComp18Parser.PK_Authors)
                self.state = 1006
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1007
                self.match(SLComp18Parser.PK_ErrorBehaviour)
                self.state = 1008
                self.error_behaviour()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1009
                self.match(SLComp18Parser.PK_Name)
                self.state = 1010
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1011
                self.match(SLComp18Parser.PK_ReasonUnknown)
                self.state = 1012
                self.reason_unknown()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1013
                self.match(SLComp18Parser.PK_Version)
                self.state = 1014
                self.string()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1015
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Valuation_pairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.TermContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.TermContext,i)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_valuation_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuation_pair" ):
                listener.enterValuation_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuation_pair" ):
                listener.exitValuation_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuation_pair" ):
                return visitor.visitValuation_pair(self)
            else:
                return visitor.visitChildren(self)




    def valuation_pair(self):

        localctx = SLComp18Parser.Valuation_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_valuation_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(SLComp18Parser.ParOpen)
            self.state = 1019
            self.term()
            self.state = 1020
            self.term()
            self.state = 1021
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class T_valuation_pairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SLComp18Parser.SymbolContext,0)


        def b_value(self):
            return self.getTypedRuleContext(SLComp18Parser.B_valueContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_t_valuation_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterT_valuation_pair" ):
                listener.enterT_valuation_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitT_valuation_pair" ):
                listener.exitT_valuation_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitT_valuation_pair" ):
                return visitor.visitT_valuation_pair(self)
            else:
                return visitor.visitChildren(self)




    def t_valuation_pair(self):

        localctx = SLComp18Parser.T_valuation_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_t_valuation_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(SLComp18Parser.ParOpen)
            self.state = 1024
            self.symbol()
            self.state = 1025
            self.b_value()
            self.state = 1026
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Check_sat_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Sat(self):
            return self.getToken(SLComp18Parser.PS_Sat, 0)

        def PS_Unsat(self):
            return self.getToken(SLComp18Parser.PS_Unsat, 0)

        def PS_Unknown(self):
            return self.getToken(SLComp18Parser.PS_Unknown, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_check_sat_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_sat_response" ):
                listener.enterCheck_sat_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_sat_response" ):
                listener.exitCheck_sat_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck_sat_response" ):
                return visitor.visitCheck_sat_response(self)
            else:
                return visitor.visitChildren(self)




    def check_sat_response(self):

        localctx = SLComp18Parser.Check_sat_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_check_sat_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsat))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Echo_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(SLComp18Parser.StringContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_echo_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEcho_response" ):
                listener.enterEcho_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEcho_response" ):
                listener.exitEcho_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEcho_response" ):
                return visitor.visitEcho_response(self)
            else:
                return visitor.visitChildren(self)




    def echo_response(self):

        localctx = SLComp18Parser.Echo_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_echo_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_assertions_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.TermContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.TermContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_assertions_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_assertions_response" ):
                listener.enterGet_assertions_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_assertions_response" ):
                listener.exitGet_assertions_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_assertions_response" ):
                return visitor.visitGet_assertions_response(self)
            else:
                return visitor.visitChildren(self)




    def get_assertions_response(self):

        localctx = SLComp18Parser.Get_assertions_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_get_assertions_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(SLComp18Parser.ParOpen)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.ParOpen) | (1 << SLComp18Parser.String) | (1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SLComp18Parser.Numeral - 68)) | (1 << (SLComp18Parser.Binary - 68)) | (1 << (SLComp18Parser.HexDecimal - 68)) | (1 << (SLComp18Parser.Decimal - 68)) | (1 << (SLComp18Parser.UndefinedSymbol - 68)))) != 0):
                self.state = 1033
                self.term()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_assignment_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def t_valuation_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.T_valuation_pairContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.T_valuation_pairContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_assignment_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_assignment_response" ):
                listener.enterGet_assignment_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_assignment_response" ):
                listener.exitGet_assignment_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_assignment_response" ):
                return visitor.visitGet_assignment_response(self)
            else:
                return visitor.visitChildren(self)




    def get_assignment_response(self):

        localctx = SLComp18Parser.Get_assignment_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_get_assignment_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(SLComp18Parser.ParOpen)
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SLComp18Parser.ParOpen:
                self.state = 1042
                self.t_valuation_pair()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1048
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_info_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def info_response(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Info_responseContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Info_responseContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_info_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_info_response" ):
                listener.enterGet_info_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_info_response" ):
                listener.exitGet_info_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_info_response" ):
                return visitor.visitGet_info_response(self)
            else:
                return visitor.visitChildren(self)




    def get_info_response(self):

        localctx = SLComp18Parser.Get_info_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_get_info_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(SLComp18Parser.ParOpen)
            self.state = 1052 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1051
                self.info_response()
                self.state = 1054 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SLComp18Parser.Colon - 72)) | (1 << (SLComp18Parser.PK_AllStatistics - 72)) | (1 << (SLComp18Parser.PK_AssertionStackLevels - 72)) | (1 << (SLComp18Parser.PK_Authors - 72)) | (1 << (SLComp18Parser.PK_Category - 72)) | (1 << (SLComp18Parser.PK_Chainable - 72)) | (1 << (SLComp18Parser.PK_Definition - 72)) | (1 << (SLComp18Parser.PK_DiagnosticOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ErrorBehaviour - 72)) | (1 << (SLComp18Parser.PK_Extension - 72)) | (1 << (SLComp18Parser.PK_Funs - 72)) | (1 << (SLComp18Parser.PK_FunsDescription - 72)) | (1 << (SLComp18Parser.PK_GlobalDeclarations - 72)) | (1 << (SLComp18Parser.PK_InteractiveMode - 72)) | (1 << (SLComp18Parser.PK_Language - 72)) | (1 << (SLComp18Parser.PK_LeftAssoc - 72)) | (1 << (SLComp18Parser.PK_License - 72)) | (1 << (SLComp18Parser.PK_Named - 72)) | (1 << (SLComp18Parser.PK_Name - 72)) | (1 << (SLComp18Parser.PK_Notes - 72)) | (1 << (SLComp18Parser.PK_Pattern - 72)) | (1 << (SLComp18Parser.PK_PrintSuccess - 72)) | (1 << (SLComp18Parser.PK_ProduceAssertions - 72)) | (1 << (SLComp18Parser.PK_ProduceAssignments - 72)) | (1 << (SLComp18Parser.PK_ProduceModels - 72)) | (1 << (SLComp18Parser.PK_ProduceProofs - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatAssumptions - 72)) | (1 << (SLComp18Parser.PK_ProduceUnsatCores - 72)) | (1 << (SLComp18Parser.PK_RandomSeed - 72)) | (1 << (SLComp18Parser.PK_ReasonUnknown - 72)) | (1 << (SLComp18Parser.PK_RegularOutputChannel - 72)) | (1 << (SLComp18Parser.PK_ReproducibleResourceLimit - 72)) | (1 << (SLComp18Parser.PK_RightAssoc - 72)) | (1 << (SLComp18Parser.PK_SmtLibVersion - 72)) | (1 << (SLComp18Parser.PK_Sorts - 72)) | (1 << (SLComp18Parser.PK_SortsDescription - 72)) | (1 << (SLComp18Parser.PK_Source - 72)) | (1 << (SLComp18Parser.PK_Status - 72)) | (1 << (SLComp18Parser.PK_Theories - 72)) | (1 << (SLComp18Parser.PK_Values - 72)) | (1 << (SLComp18Parser.PK_Verbosity - 72)) | (1 << (SLComp18Parser.PK_Version - 72)))) != 0)):
                    break

            self.state = 1056
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_model_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def model_response(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Model_responseContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Model_responseContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_model_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_model_response" ):
                listener.enterGet_model_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_model_response" ):
                listener.exitGet_model_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_model_response" ):
                return visitor.visitGet_model_response(self)
            else:
                return visitor.visitChildren(self)




    def get_model_response(self):

        localctx = SLComp18Parser.Get_model_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_get_model_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(SLComp18Parser.ParOpen)
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SLComp18Parser.ParOpen:
                self.state = 1059
                self.model_response()
                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1065
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_option_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_value(self):
            return self.getTypedRuleContext(SLComp18Parser.Attribute_valueContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_option_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_option_response" ):
                listener.enterGet_option_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_option_response" ):
                listener.exitGet_option_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_option_response" ):
                return visitor.visitGet_option_response(self)
            else:
                return visitor.visitChildren(self)




    def get_option_response(self):

        localctx = SLComp18Parser.Get_option_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_get_option_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.attribute_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_proof_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_expr(self):
            return self.getTypedRuleContext(SLComp18Parser.S_exprContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_proof_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_proof_response" ):
                listener.enterGet_proof_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_proof_response" ):
                listener.exitGet_proof_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_proof_response" ):
                return visitor.visitGet_proof_response(self)
            else:
                return visitor.visitChildren(self)




    def get_proof_response(self):

        localctx = SLComp18Parser.Get_proof_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_get_proof_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.s_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_unsat_assump_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_unsat_assump_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_unsat_assump_response" ):
                listener.enterGet_unsat_assump_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_unsat_assump_response" ):
                listener.exitGet_unsat_assump_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_unsat_assump_response" ):
                return visitor.visitGet_unsat_assump_response(self)
            else:
                return visitor.visitChildren(self)




    def get_unsat_assump_response(self):

        localctx = SLComp18Parser.Get_unsat_assump_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_get_unsat_assump_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(SLComp18Parser.ParOpen)
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol:
                self.state = 1072
                self.symbol()
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1078
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_unsat_core_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_unsat_core_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_unsat_core_response" ):
                listener.enterGet_unsat_core_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_unsat_core_response" ):
                listener.exitGet_unsat_core_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_unsat_core_response" ):
                return visitor.visitGet_unsat_core_response(self)
            else:
                return visitor.visitChildren(self)




    def get_unsat_core_response(self):

        localctx = SLComp18Parser.Get_unsat_core_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_get_unsat_core_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(SLComp18Parser.ParOpen)
            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SLComp18Parser.QuotedSymbol) | (1 << SLComp18Parser.PS_Not) | (1 << SLComp18Parser.PS_Bool) | (1 << SLComp18Parser.PS_ContinuedExecution) | (1 << SLComp18Parser.PS_Error) | (1 << SLComp18Parser.PS_False) | (1 << SLComp18Parser.PS_ImmediateExit) | (1 << SLComp18Parser.PS_Incomplete) | (1 << SLComp18Parser.PS_Logic) | (1 << SLComp18Parser.PS_Memout) | (1 << SLComp18Parser.PS_Sat) | (1 << SLComp18Parser.PS_Success) | (1 << SLComp18Parser.PS_Theory) | (1 << SLComp18Parser.PS_True) | (1 << SLComp18Parser.PS_Unknown) | (1 << SLComp18Parser.PS_Unsupported) | (1 << SLComp18Parser.PS_Unsat))) != 0) or _la==SLComp18Parser.UndefinedSymbol:
                self.state = 1081
                self.symbol()
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1087
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_value_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def valuation_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SLComp18Parser.Valuation_pairContext)
            else:
                return self.getTypedRuleContext(SLComp18Parser.Valuation_pairContext,i)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_get_value_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_value_response" ):
                listener.enterGet_value_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_value_response" ):
                listener.exitGet_value_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_value_response" ):
                return visitor.visitGet_value_response(self)
            else:
                return visitor.visitChildren(self)




    def get_value_response(self):

        localctx = SLComp18Parser.Get_value_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_get_value_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(SLComp18Parser.ParOpen)
            self.state = 1091 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1090
                self.valuation_pair()
                self.state = 1093 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SLComp18Parser.ParOpen):
                    break

            self.state = 1095
            self.match(SLComp18Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Specific_success_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def check_sat_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Check_sat_responseContext,0)


        def echo_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Echo_responseContext,0)


        def get_assertions_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_assertions_responseContext,0)


        def get_assignment_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_assignment_responseContext,0)


        def get_info_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_info_responseContext,0)


        def get_model_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_model_responseContext,0)


        def get_option_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_option_responseContext,0)


        def get_proof_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_proof_responseContext,0)


        def get_unsat_assump_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_unsat_assump_responseContext,0)


        def get_unsat_core_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_unsat_core_responseContext,0)


        def get_value_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Get_value_responseContext,0)


        def getRuleIndex(self):
            return SLComp18Parser.RULE_specific_success_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_success_response" ):
                listener.enterSpecific_success_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_success_response" ):
                listener.exitSpecific_success_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecific_success_response" ):
                return visitor.visitSpecific_success_response(self)
            else:
                return visitor.visitChildren(self)




    def specific_success_response(self):

        localctx = SLComp18Parser.Specific_success_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_specific_success_response)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.check_sat_response()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.echo_response()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1099
                self.get_assertions_response()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1100
                self.get_assignment_response()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1101
                self.get_info_response()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1102
                self.get_model_response()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1103
                self.get_option_response()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1104
                self.get_proof_response()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1105
                self.get_unsat_assump_response()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1106
                self.get_unsat_core_response()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1107
                self.get_value_response()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_responseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Success(self):
            return self.getToken(SLComp18Parser.PS_Success, 0)

        def specific_success_response(self):
            return self.getTypedRuleContext(SLComp18Parser.Specific_success_responseContext,0)


        def PS_Unsupported(self):
            return self.getToken(SLComp18Parser.PS_Unsupported, 0)

        def ParOpen(self):
            return self.getToken(SLComp18Parser.ParOpen, 0)

        def PS_Error(self):
            return self.getToken(SLComp18Parser.PS_Error, 0)

        def string(self):
            return self.getTypedRuleContext(SLComp18Parser.StringContext,0)


        def ParClose(self):
            return self.getToken(SLComp18Parser.ParClose, 0)

        def getRuleIndex(self):
            return SLComp18Parser.RULE_general_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_response" ):
                listener.enterGeneral_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_response" ):
                listener.exitGeneral_response(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_response" ):
                return visitor.visitGeneral_response(self)
            else:
                return visitor.visitChildren(self)




    def general_response(self):

        localctx = SLComp18Parser.General_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_general_response)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.match(SLComp18Parser.PS_Success)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.specific_success_response()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1112
                self.match(SLComp18Parser.PS_Unsupported)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1113
                self.match(SLComp18Parser.ParOpen)
                self.state = 1114
                self.match(SLComp18Parser.PS_Error)
                self.state = 1115
                self.string()
                self.state = 1116
                self.match(SLComp18Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





